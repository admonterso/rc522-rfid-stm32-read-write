
rfid_mathat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004180  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b4  080044b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080044b4  080044b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b4  080044b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  0800452c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  0800452c  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000816a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195f  00000000  00000000  00028203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00029b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f43  00000000  00000000  0002adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c17  00000000  00000000  00042cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bd3  00000000  00000000  0004c90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d24dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000312c  00000000  00000000  000d2530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004274 	.word	0x08004274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004274 	.word	0x08004274

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <led>:

/**
 * @brief  The application entry point.
 * @retval int
 */
void led(uint8_t n) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 8000166:	2300      	movs	r3, #0
 8000168:	73fb      	strb	r3, [r7, #15]
 800016a:	e014      	b.n	8000196 <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	480d      	ldr	r0, [pc, #52]	; (80001a8 <led+0x4c>)
 8000174:	f001 fd4e 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000178:	2064      	movs	r0, #100	; 0x64
 800017a:	f001 fabf 	bl	80016fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <led+0x4c>)
 8000186:	f001 fd45 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800018a:	2064      	movs	r0, #100	; 0x64
 800018c:	f001 fab6 	bl	80016fc <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 8000190:	7bfb      	ldrb	r3, [r7, #15]
 8000192:	3301      	adds	r3, #1
 8000194:	73fb      	strb	r3, [r7, #15]
 8000196:	7bfa      	ldrb	r2, [r7, #15]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3e6      	bcc.n	800016c <led+0x10>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40011000 	.word	0x40011000

080001ac <generate_random.0>:
	uint8_t *p;
	uint8_t IDBuff[64];
	uint8_t WriteDataBuff[64];
	uint8_t ReadDataBuff[64];

	uint8_t* generate_random() { //this will generate random number in range 55 to 126 than converted to ASCII
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t i;
		static uint8_t chars[20];

		srand(HAL_GetTick());
 80001b6:	f001 fa97 	bl	80016e8 <HAL_GetTick>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fe1f 	bl	8002e00 <srand>

		for (i = 0; i < 16; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	73fb      	strb	r3, [r7, #15]
 80001c6:	e017      	b.n	80001f8 <generate_random.0+0x4c>
			uint8_t rand_num = (rand() % (126 - 55 + 1)) + 55;
 80001c8:	f002 fe48 	bl	8002e5c <rand>
 80001cc:	4602      	mov	r2, r0
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <generate_random.0+0x5c>)
 80001d0:	fb83 1302 	smull	r1, r3, r3, r2
 80001d4:	1119      	asrs	r1, r3, #4
 80001d6:	17d3      	asrs	r3, r2, #31
 80001d8:	1ac9      	subs	r1, r1, r3
 80001da:	460b      	mov	r3, r1
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	440b      	add	r3, r1
 80001e0:	00db      	lsls	r3, r3, #3
 80001e2:	1ad1      	subs	r1, r2, r3
 80001e4:	b2cb      	uxtb	r3, r1
 80001e6:	3337      	adds	r3, #55	; 0x37
 80001e8:	73bb      	strb	r3, [r7, #14]
			chars[i] = rand_num;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <generate_random.0+0x60>)
 80001ee:	7bba      	ldrb	r2, [r7, #14]
 80001f0:	54ca      	strb	r2, [r1, r3]
		for (i = 0; i < 16; i++) {
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	3301      	adds	r3, #1
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	2b0f      	cmp	r3, #15
 80001fc:	d9e4      	bls.n	80001c8 <generate_random.0+0x1c>
		}
		return chars;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <generate_random.0+0x60>)

	}
 8000200:	4618      	mov	r0, r3
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	38e38e39 	.word	0x38e38e39
 800020c:	20000228 	.word	0x20000228

08000210 <cardOperation>:
void cardOperation(uint8_t* finalData){
 8000210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000212:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8000216:	af0e      	add	r7, sp, #56	; 0x38
 8000218:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800021c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000220:	6018      	str	r0, [r3, #0]
 8000222:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8000226:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800022a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800022e:	601a      	str	r2, [r3, #0]
	uint8_t sectorKeyA[16][16] = { { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }, { 0xFF,
 8000230:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000234:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000238:	4618      	mov	r0, r3
 800023a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800023e:	461a      	mov	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f002 fdd5 	bl	8002df0 <memset>
 8000246:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800024a:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800024e:	495e      	ldr	r1, [pc, #376]	; (80003c8 <cardOperation+0x1b8>)
 8000250:	4613      	mov	r3, r2
 8000252:	c903      	ldmia	r1, {r0, r1}
 8000254:	6018      	str	r0, [r3, #0]
 8000256:	3304      	adds	r3, #4
 8000258:	8019      	strh	r1, [r3, #0]
 800025a:	3302      	adds	r3, #2
 800025c:	0c09      	lsrs	r1, r1, #16
 800025e:	7019      	strb	r1, [r3, #0]
 8000260:	1dd3      	adds	r3, r2, #7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	721a      	strb	r2, [r3, #8]
 800026a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800026e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8000272:	4955      	ldr	r1, [pc, #340]	; (80003c8 <cardOperation+0x1b8>)
 8000274:	f102 0310 	add.w	r3, r2, #16
 8000278:	c903      	ldmia	r1, {r0, r1}
 800027a:	6018      	str	r0, [r3, #0]
 800027c:	3304      	adds	r3, #4
 800027e:	8019      	strh	r1, [r3, #0]
 8000280:	3302      	adds	r3, #2
 8000282:	0c09      	lsrs	r1, r1, #16
 8000284:	7019      	strb	r1, [r3, #0]
 8000286:	f102 0317 	add.w	r3, r2, #23
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	721a      	strb	r2, [r3, #8]
 8000292:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000296:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800029a:	494b      	ldr	r1, [pc, #300]	; (80003c8 <cardOperation+0x1b8>)
 800029c:	f102 0320 	add.w	r3, r2, #32
 80002a0:	c903      	ldmia	r1, {r0, r1}
 80002a2:	6018      	str	r0, [r3, #0]
 80002a4:	3304      	adds	r3, #4
 80002a6:	8019      	strh	r1, [r3, #0]
 80002a8:	3302      	adds	r3, #2
 80002aa:	0c09      	lsrs	r1, r1, #16
 80002ac:	7019      	strb	r1, [r3, #0]
 80002ae:	f102 0327 	add.w	r3, r2, #39	; 0x27
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	721a      	strb	r2, [r3, #8]
 80002ba:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80002be:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80002c2:	4941      	ldr	r1, [pc, #260]	; (80003c8 <cardOperation+0x1b8>)
 80002c4:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80002c8:	c903      	ldmia	r1, {r0, r1}
 80002ca:	6018      	str	r0, [r3, #0]
 80002cc:	3304      	adds	r3, #4
 80002ce:	8019      	strh	r1, [r3, #0]
 80002d0:	3302      	adds	r3, #2
 80002d2:	0c09      	lsrs	r1, r1, #16
 80002d4:	7019      	strb	r1, [r3, #0]
 80002d6:	f102 0337 	add.w	r3, r2, #55	; 0x37
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	721a      	strb	r2, [r3, #8]
	uint8_t cardIDStatus = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
	uint8_t cardReadStatus = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
	uint8_t cardWriteStatus = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283

	while (cardWriteStatus == 0 && cardIDStatus == 0 && cardReadStatus == 0) {
 80002f4:	e04f      	b.n	8000396 <cardOperation+0x186>
		MFRC522_Init();
 80002f6:	f000 ff83 	bl	8001200 <MFRC522_Init>
		if (!MFRC522_Request(PICC_REQIDL, str)) {
 80002fa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80002fe:	4619      	mov	r1, r3
 8000300:	2026      	movs	r0, #38	; 0x26
 8000302:	f000 fcd5 	bl	8000cb0 <MFRC522_Request>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d144      	bne.n	8000396 <cardOperation+0x186>
			if (!MFRC522_Anticoll(str)) {
 800030c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fdc1 	bl	8000e98 <MFRC522_Anticoll>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d13c      	bne.n	8000396 <cardOperation+0x186>

				sprintf((char*) IDBuff, "{\"terminalID\":\"164522975789130\", cardID:\"%x%x%x%x%x\", ", str[0],str[1], str[2], str[3], str[4]);
 800031c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000320:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461c      	mov	r4, r3
 8000328:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800032c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000330:	785b      	ldrb	r3, [r3, #1]
 8000332:	461d      	mov	r5, r3
 8000334:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000338:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800033c:	789b      	ldrb	r3, [r3, #2]
 800033e:	461a      	mov	r2, r3
 8000340:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000344:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000348:	78db      	ldrb	r3, [r3, #3]
 800034a:	4619      	mov	r1, r3
 800034c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000350:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000354:	791b      	ldrb	r3, [r3, #4]
 8000356:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800035a:	9302      	str	r3, [sp, #8]
 800035c:	9101      	str	r1, [sp, #4]
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	462b      	mov	r3, r5
 8000362:	4622      	mov	r2, r4
 8000364:	4919      	ldr	r1, [pc, #100]	; (80003cc <cardOperation+0x1bc>)
 8000366:	f002 fdb7 	bl	8002ed8 <siprintf>

				l = strlen((char*)IDBuff);
 800036a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff feec 	bl	800014c <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286

				memcpy(finalData, IDBuff, l);
 800037a:	f897 2286 	ldrb.w	r2, [r7, #646]	; 0x286
 800037e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000382:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000386:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800038a:	6818      	ldr	r0, [r3, #0]
 800038c:	f002 fd22 	bl	8002dd4 <memcpy>

				cardIDStatus = 1;
 8000390:	2301      	movs	r3, #1
 8000392:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
	while (cardWriteStatus == 0 && cardIDStatus == 0 && cardReadStatus == 0) {
 8000396:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800039a:	2b00      	cmp	r3, #0
 800039c:	d107      	bne.n	80003ae <cardOperation+0x19e>
 800039e:	f897 3285 	ldrb.w	r3, [r7, #645]	; 0x285
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d103      	bne.n	80003ae <cardOperation+0x19e>
 80003a6:	f897 3284 	ldrb.w	r3, [r7, #644]	; 0x284
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0a3      	beq.n	80002f6 <cardOperation+0xe6>
			}
		}

	}

	p = generate_random();
 80003ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b2:	469c      	mov	ip, r3
 80003b4:	f7ff fefa 	bl	80001ac <generate_random.0>
 80003b8:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c

	HAL_Delay(20);
 80003bc:	2014      	movs	r0, #20
 80003be:	f001 f99d 	bl	80016fc <HAL_Delay>
	MFRC522_Init();
 80003c2:	f000 ff1d 	bl	8001200 <MFRC522_Init>
	while (cardReadStatus == 0 && cardIDStatus == 1 && cardWriteStatus == 0) {
 80003c6:	e124      	b.n	8000612 <cardOperation+0x402>
 80003c8:	08004334 	.word	0x08004334
 80003cc:	0800428c 	.word	0x0800428c
		MFRC522_Init();
 80003d0:	f000 ff16 	bl	8001200 <MFRC522_Init>
		status = MFRC522_Request(PICC_REQIDL, str);
 80003d4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80003d8:	4619      	mov	r1, r3
 80003da:	2026      	movs	r0, #38	; 0x26
 80003dc:	f000 fc68 	bl	8000cb0 <MFRC522_Request>
 80003e0:	4603      	mov	r3, r0
 80003e2:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
		if (status == MI_OK) {
 80003e6:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8106 	bne.w	80005fc <cardOperation+0x3ec>
			status = MFRC522_Anticoll(str);
 80003f0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fd4f 	bl	8000e98 <MFRC522_Anticoll>
 80003fa:	4603      	mov	r3, r0
 80003fc:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
			if (status == MI_OK) {
 8000400:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000404:	2b00      	cmp	r3, #0
 8000406:	f040 80ee 	bne.w	80005e6 <cardOperation+0x3d6>
				status = MFRC522_SelectTag(str);
 800040a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fdc8 	bl	8000fa4 <MFRC522_SelectTag>
 8000414:	4603      	mov	r3, r0
 8000416:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				if (status != 0) {
 800041a:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800041e:	2b00      	cmp	r3, #0
 8000420:	f000 80d6 	beq.w	80005d0 <cardOperation+0x3c0>
					status = MFRC522_Auth(PICC_AUTHENT1A, 2, sectorKeyA[2],
 8000424:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8000428:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800042c:	f103 0220 	add.w	r2, r3, #32
 8000430:	460b      	mov	r3, r1
 8000432:	2102      	movs	r1, #2
 8000434:	2060      	movs	r0, #96	; 0x60
 8000436:	f000 fdf7 	bl	8001028 <MFRC522_Auth>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
							str); //authenticate card
					if (status == MI_OK) {
 8000440:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000444:	2b00      	cmp	r3, #0
 8000446:	f040 80b8 	bne.w	80005ba <cardOperation+0x3aa>
						status = MFRC522_Read(2, str1); //read the 2 sector
 800044a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800044e:	4619      	mov	r1, r3
 8000450:	2002      	movs	r0, #2
 8000452:	f000 fe3c 	bl	80010ce <MFRC522_Read>
 8000456:	4603      	mov	r3, r0
 8000458:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
						if (status == MI_OK) {
 800045c:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000460:	2b00      	cmp	r3, #0
 8000462:	f040 809f 	bne.w	80005a4 <cardOperation+0x394>

							sprintf((char*) ReadDataBuff, "\"currentToken\": \"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\", ", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 8000466:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800046a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	469c      	mov	ip, r3
 8000472:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000476:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800047a:	785b      	ldrb	r3, [r3, #1]
 800047c:	469e      	mov	lr, r3
 800047e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000482:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	461c      	mov	r4, r3
 800048a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800048e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000492:	78db      	ldrb	r3, [r3, #3]
 8000494:	461d      	mov	r5, r3
 8000496:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800049a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	461e      	mov	r6, r3
 80004a2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	623b      	str	r3, [r7, #32]
 80004ae:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004b6:	799b      	ldrb	r3, [r3, #6]
 80004b8:	61fb      	str	r3, [r7, #28]
 80004ba:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004c2:	79db      	ldrb	r3, [r3, #7]
 80004c4:	61bb      	str	r3, [r7, #24]
 80004c6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004ce:	7a1b      	ldrb	r3, [r3, #8]
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004da:	7a5b      	ldrb	r3, [r3, #9]
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004e6:	7a9b      	ldrb	r3, [r3, #10]
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004f2:	7adb      	ldrb	r3, [r3, #11]
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80004fe:	7b1b      	ldrb	r3, [r3, #12]
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000506:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800050a:	7b5b      	ldrb	r3, [r3, #13]
 800050c:	4619      	mov	r1, r3
 800050e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000512:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000516:	7b9b      	ldrb	r3, [r3, #14]
 8000518:	461a      	mov	r2, r3
 800051a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800051e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000522:	7bdb      	ldrb	r3, [r3, #15]
 8000524:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000528:	930d      	str	r3, [sp, #52]	; 0x34
 800052a:	920c      	str	r2, [sp, #48]	; 0x30
 800052c:	910b      	str	r1, [sp, #44]	; 0x2c
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	920a      	str	r2, [sp, #40]	; 0x28
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	9209      	str	r2, [sp, #36]	; 0x24
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	9208      	str	r2, [sp, #32]
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	9207      	str	r2, [sp, #28]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	9206      	str	r2, [sp, #24]
 8000542:	69ba      	ldr	r2, [r7, #24]
 8000544:	9205      	str	r2, [sp, #20]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	9204      	str	r2, [sp, #16]
 800054a:	6a3b      	ldr	r3, [r7, #32]
 800054c:	9303      	str	r3, [sp, #12]
 800054e:	9602      	str	r6, [sp, #8]
 8000550:	9501      	str	r5, [sp, #4]
 8000552:	9400      	str	r4, [sp, #0]
 8000554:	4673      	mov	r3, lr
 8000556:	4662      	mov	r2, ip
 8000558:	49c0      	ldr	r1, [pc, #768]	; (800085c <cardOperation+0x64c>)
 800055a:	f002 fcbd 	bl	8002ed8 <siprintf>

							memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800055e:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 8000562:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8000566:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 800056a:	6812      	ldr	r2, [r2, #0]
 800056c:	18d4      	adds	r4, r2, r3
 800056e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fdea 	bl	800014c <strlen>
 8000578:	4602      	mov	r2, r0
 800057a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800057e:	4619      	mov	r1, r3
 8000580:	4620      	mov	r0, r4
 8000582:	f002 fc27 	bl	8002dd4 <memcpy>

							l = l + strlen((char*)ReadDataBuff);
 8000586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fdde 	bl	800014c <strlen>
 8000590:	4603      	mov	r3, r0
 8000592:	b2da      	uxtb	r2, r3
 8000594:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 8000598:	4413      	add	r3, r2
 800059a:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286

							cardReadStatus = 1;
 800059e:	2301      	movs	r3, #1
 80005a0:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
						}

						if (status == MI_ERR) {
 80005a4:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d106      	bne.n	80005ba <cardOperation+0x3aa>
							led(READ_ERR);
 80005ac:	2005      	movs	r0, #5
 80005ae:	f7ff fdd5 	bl	800015c <led>
							cardIDStatus = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
							break;
 80005b8:	e038      	b.n	800062c <cardOperation+0x41c>

						}
					}
					if (status != MI_OK) {
 80005ba:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d006      	beq.n	80005d0 <cardOperation+0x3c0>
						led(AUTH_ERR);
 80005c2:	2004      	movs	r0, #4
 80005c4:	f7ff fdca 	bl	800015c <led>
						cardIDStatus = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
						break;
 80005ce:	e02d      	b.n	800062c <cardOperation+0x41c>
					}
				}
				if (status != MI_OK) {
 80005d0:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d006      	beq.n	80005e6 <cardOperation+0x3d6>
					led(TAG_SELECT_ERR);
 80005d8:	2003      	movs	r0, #3
 80005da:	f7ff fdbf 	bl	800015c <led>
					cardIDStatus = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
					break;
 80005e4:	e022      	b.n	800062c <cardOperation+0x41c>
				}

			}
			if (status != MI_OK) {
 80005e6:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <cardOperation+0x3ec>
				led(ANTICOL_ERR);
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff fdb4 	bl	800015c <led>
				cardIDStatus = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
				break;
 80005fa:	e017      	b.n	800062c <cardOperation+0x41c>
			}

		}
		if (status != MI_OK) {
 80005fc:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000600:	2b00      	cmp	r3, #0
 8000602:	d006      	beq.n	8000612 <cardOperation+0x402>
			led(REQUEST_ERR);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff fda9 	bl	800015c <led>
			cardIDStatus = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
			break;
 8000610:	e00c      	b.n	800062c <cardOperation+0x41c>
	while (cardReadStatus == 0 && cardIDStatus == 1 && cardWriteStatus == 0) {
 8000612:	f897 3284 	ldrb.w	r3, [r7, #644]	; 0x284
 8000616:	2b00      	cmp	r3, #0
 8000618:	d108      	bne.n	800062c <cardOperation+0x41c>
 800061a:	f897 3285 	ldrb.w	r3, [r7, #645]	; 0x285
 800061e:	2b01      	cmp	r3, #1
 8000620:	d104      	bne.n	800062c <cardOperation+0x41c>
 8000622:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000626:	2b00      	cmp	r3, #0
 8000628:	f43f aed2 	beq.w	80003d0 <cardOperation+0x1c0>
		}
	}
	HAL_Delay(20);
 800062c:	2014      	movs	r0, #20
 800062e:	f001 f865 	bl	80016fc <HAL_Delay>
	MFRC522_Init();
 8000632:	f000 fde5 	bl	8001200 <MFRC522_Init>
	while (cardWriteStatus == 0 && cardIDStatus == 1 && cardReadStatus == 1 ) {
 8000636:	e115      	b.n	8000864 <cardOperation+0x654>
		MFRC522_Init();
 8000638:	f000 fde2 	bl	8001200 <MFRC522_Init>
		status = MFRC522_Request(PICC_REQIDL, str);
 800063c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000640:	4619      	mov	r1, r3
 8000642:	2026      	movs	r0, #38	; 0x26
 8000644:	f000 fb34 	bl	8000cb0 <MFRC522_Request>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
		if (status == MI_OK) {
 800064e:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000652:	2b00      	cmp	r3, #0
 8000654:	f040 80f4 	bne.w	8000840 <cardOperation+0x630>
			status = MFRC522_Anticoll(str);
 8000658:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fc1b 	bl	8000e98 <MFRC522_Anticoll>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
			if (status == MI_OK) {
 8000668:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800066c:	2b00      	cmp	r3, #0
 800066e:	f040 80d9 	bne.w	8000824 <cardOperation+0x614>
				status = MFRC522_SelectTag(str);
 8000672:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fc94 	bl	8000fa4 <MFRC522_SelectTag>
 800067c:	4603      	mov	r3, r0
 800067e:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
				if (status != 0) {
 8000682:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 80be 	beq.w	8000808 <cardOperation+0x5f8>
					status = MFRC522_Auth(PICC_AUTHENT1A, 2, sectorKeyA[2],
 800068c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8000690:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000694:	f103 0220 	add.w	r2, r3, #32
 8000698:	460b      	mov	r3, r1
 800069a:	2102      	movs	r1, #2
 800069c:	2060      	movs	r0, #96	; 0x60
 800069e:	f000 fcc3 	bl	8001028 <MFRC522_Auth>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
							str);
					if (status == MI_OK) {
 80006a8:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	f040 809d 	bne.w	80007ec <cardOperation+0x5dc>
						status = MFRC522_Write(2, p);
 80006b2:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 fd35 	bl	8001126 <MFRC522_Write>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
						if (status == MI_OK) {
 80006c2:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f040 8082 	bne.w	80007d0 <cardOperation+0x5c0>

							sprintf((char*) WriteDataBuff,
									"\"futureToken\": \"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}\n\r",
									*(p), *(p + 1), *(p + 2), *(p + 3),
 80006cc:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80006d0:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 80006d2:	469c      	mov	ip, r3
									*(p), *(p + 1), *(p + 2), *(p + 3),
 80006d4:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80006d8:	3301      	adds	r3, #1
 80006da:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 80006dc:	469e      	mov	lr, r3
									*(p), *(p + 1), *(p + 2), *(p + 3),
 80006de:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80006e2:	3302      	adds	r3, #2
 80006e4:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 80006e6:	461c      	mov	r4, r3
									*(p), *(p + 1), *(p + 2), *(p + 3),
 80006e8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80006ec:	3303      	adds	r3, #3
 80006ee:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 80006f0:	461d      	mov	r5, r3
									*(p + 4), *(p + 5), *(p + 6), *(p + 7),
 80006f2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80006f6:	3304      	adds	r3, #4
 80006f8:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 80006fa:	461e      	mov	r6, r3
									*(p + 4), *(p + 5), *(p + 6), *(p + 7),
 80006fc:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000700:	3305      	adds	r3, #5
 8000702:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000704:	623b      	str	r3, [r7, #32]
									*(p + 4), *(p + 5), *(p + 6), *(p + 7),
 8000706:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800070a:	3306      	adds	r3, #6
 800070c:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 800070e:	61fb      	str	r3, [r7, #28]
									*(p + 4), *(p + 5), *(p + 6), *(p + 7),
 8000710:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000714:	3307      	adds	r3, #7
 8000716:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000718:	61bb      	str	r3, [r7, #24]
									*(p + 8), *(p + 9), *(p + 10),
 800071a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800071e:	3308      	adds	r3, #8
 8000720:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000722:	617b      	str	r3, [r7, #20]
									*(p + 8), *(p + 9), *(p + 10),
 8000724:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000728:	3309      	adds	r3, #9
 800072a:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 800072c:	613b      	str	r3, [r7, #16]
									*(p + 8), *(p + 9), *(p + 10),
 800072e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000732:	330a      	adds	r3, #10
 8000734:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000736:	60fb      	str	r3, [r7, #12]
									*(p + 11), *(p + 12), *(p + 13),
 8000738:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800073c:	330b      	adds	r3, #11
 800073e:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000740:	60bb      	str	r3, [r7, #8]
									*(p + 11), *(p + 12), *(p + 13),
 8000742:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000746:	330c      	adds	r3, #12
 8000748:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 800074a:	607b      	str	r3, [r7, #4]
									*(p + 11), *(p + 12), *(p + 13),
 800074c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000750:	330d      	adds	r3, #13
 8000752:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000754:	4619      	mov	r1, r3
									*(p + 14), *(p + 15));
 8000756:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800075a:	330e      	adds	r3, #14
 800075c:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 800075e:	461a      	mov	r2, r3
									*(p + 14), *(p + 15));
 8000760:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000764:	330f      	adds	r3, #15
 8000766:	781b      	ldrb	r3, [r3, #0]
							sprintf((char*) WriteDataBuff,
 8000768:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800076c:	930d      	str	r3, [sp, #52]	; 0x34
 800076e:	920c      	str	r2, [sp, #48]	; 0x30
 8000770:	910b      	str	r1, [sp, #44]	; 0x2c
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	920a      	str	r2, [sp, #40]	; 0x28
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	9209      	str	r2, [sp, #36]	; 0x24
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	9208      	str	r2, [sp, #32]
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	9207      	str	r2, [sp, #28]
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	9206      	str	r2, [sp, #24]
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	9205      	str	r2, [sp, #20]
 800078a:	69fa      	ldr	r2, [r7, #28]
 800078c:	9204      	str	r2, [sp, #16]
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	9303      	str	r3, [sp, #12]
 8000792:	9602      	str	r6, [sp, #8]
 8000794:	9501      	str	r5, [sp, #4]
 8000796:	9400      	str	r4, [sp, #0]
 8000798:	4673      	mov	r3, lr
 800079a:	4662      	mov	r2, ip
 800079c:	4930      	ldr	r1, [pc, #192]	; (8000860 <cardOperation+0x650>)
 800079e:	f002 fb9b 	bl	8002ed8 <siprintf>


							memcpy(finalData + l, WriteDataBuff, strlen((char*)WriteDataBuff));
 80007a2:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 80007a6:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80007aa:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	18d4      	adds	r4, r2, r3
 80007b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fcc8 	bl	800014c <strlen>
 80007bc:	4602      	mov	r2, r0
 80007be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c2:	4619      	mov	r1, r3
 80007c4:	4620      	mov	r0, r4
 80007c6:	f002 fb05 	bl	8002dd4 <memcpy>

							cardWriteStatus = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
						}

						if (status != MI_OK) {
 80007d0:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d009      	beq.n	80007ec <cardOperation+0x5dc>
							led(WRITE_ERR);
 80007d8:	2006      	movs	r0, #6
 80007da:	f7ff fcbf 	bl	800015c <led>
							cardIDStatus = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
							cardReadStatus = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
							break;
 80007ea:	e048      	b.n	800087e <cardOperation+0x66e>

						}
					}
					if(status != MI_OK){
 80007ec:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d009      	beq.n	8000808 <cardOperation+0x5f8>
						led(AUTH_ERR);
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff fcb1 	bl	800015c <led>
						cardIDStatus = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
						cardReadStatus = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
						break;
 8000806:	e03a      	b.n	800087e <cardOperation+0x66e>
					}
				}
				if(status != MI_OK){
 8000808:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800080c:	2b00      	cmp	r3, #0
 800080e:	d009      	beq.n	8000824 <cardOperation+0x614>
					led(TAG_SELECT_ERR);
 8000810:	2003      	movs	r0, #3
 8000812:	f7ff fca3 	bl	800015c <led>
					cardIDStatus = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
					cardReadStatus = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
					break;
 8000822:	e02c      	b.n	800087e <cardOperation+0x66e>
				}

			}
			if(status != MI_OK){
 8000824:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000828:	2b00      	cmp	r3, #0
 800082a:	d009      	beq.n	8000840 <cardOperation+0x630>
				led(ANTICOL_ERR);
 800082c:	2002      	movs	r0, #2
 800082e:	f7ff fc95 	bl	800015c <led>
				cardIDStatus = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
				cardReadStatus = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
				break;
 800083e:	e01e      	b.n	800087e <cardOperation+0x66e>
			}
		}
		if(status != MI_OK){
 8000840:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00d      	beq.n	8000864 <cardOperation+0x654>
			led(REQUEST_ERR);
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff fc87 	bl	800015c <led>
			cardIDStatus = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
			cardReadStatus = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
			break;
 800085a:	e010      	b.n	800087e <cardOperation+0x66e>
 800085c:	080042c4 	.word	0x080042c4
 8000860:	080042fc 	.word	0x080042fc
	while (cardWriteStatus == 0 && cardIDStatus == 1 && cardReadStatus == 1 ) {
 8000864:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000868:	2b00      	cmp	r3, #0
 800086a:	d108      	bne.n	800087e <cardOperation+0x66e>
 800086c:	f897 3285 	ldrb.w	r3, [r7, #645]	; 0x285
 8000870:	2b01      	cmp	r3, #1
 8000872:	d104      	bne.n	800087e <cardOperation+0x66e>
 8000874:	f897 3284 	ldrb.w	r3, [r7, #644]	; 0x284
 8000878:	2b01      	cmp	r3, #1
 800087a:	f43f aedd 	beq.w	8000638 <cardOperation+0x428>
		}
	}
	if(cardWriteStatus == 1 && cardIDStatus == 1 && cardReadStatus == 1){
 800087e:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000882:	2b01      	cmp	r3, #1
 8000884:	d111      	bne.n	80008aa <cardOperation+0x69a>
 8000886:	f897 3285 	ldrb.w	r3, [r7, #645]	; 0x285
 800088a:	2b01      	cmp	r3, #1
 800088c:	d10d      	bne.n	80008aa <cardOperation+0x69a>
 800088e:	f897 3284 	ldrb.w	r3, [r7, #644]	; 0x284
 8000892:	2b01      	cmp	r3, #1
 8000894:	d109      	bne.n	80008aa <cardOperation+0x69a>

		cardIDStatus = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3285 	strb.w	r3, [r7, #645]	; 0x285
		cardReadStatus = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3284 	strb.w	r3, [r7, #644]	; 0x284
		cardWriteStatus = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
 80008a8:	e003      	b.n	80008b2 <cardOperation+0x6a2>

	}
	else{
		cardOperation(FinalData);
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <cardOperation+0x6ac>)
 80008ac:	f7ff fcb0 	bl	8000210 <cardOperation>
	}
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	f507 7723 	add.w	r7, r7, #652	; 0x28c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	20000128 	.word	0x20000128

080008c0 <main>:

int main(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick.
	 *
	 */
	HAL_Init();
 80008c4:	f000 feb8 	bl	8001638 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008c8:	f000 f824 	bl	8000914 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008cc:	f000 f8c8 	bl	8000a60 <MX_GPIO_Init>
	MX_SPI1_Init();
 80008d0:	f000 f866 	bl	80009a0 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80008d4:	f000 f89a 	bl	8000a0c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	MFRC522_Init();
 80008d8:	f000 fc92 	bl	8001200 <MFRC522_Init>
	led(3);
 80008dc:	2003      	movs	r0, #3
 80008de:	f7ff fc3d 	bl	800015c <led>


	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(500);
 80008e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e6:	f000 ff09 	bl	80016fc <HAL_Delay>
      cardOperation(FinalData);
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <main+0x4c>)
 80008ec:	f7ff fc90 	bl	8000210 <cardOperation>
      HAL_UART_Transmit(&huart2, FinalData, sizeof FinalData/ sizeof FinalData[0], 1000);
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	22ff      	movs	r2, #255	; 0xff
 80008f6:	4905      	ldr	r1, [pc, #20]	; (800090c <main+0x4c>)
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <main+0x50>)
 80008fa:	f002 f8d6 	bl	8002aaa <HAL_UART_Transmit>
      memset(FinalData, 0, sizeof(FinalData));
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	2100      	movs	r1, #0
 8000902:	4802      	ldr	r0, [pc, #8]	; (800090c <main+0x4c>)
 8000904:	f002 fa74 	bl	8002df0 <memset>
		HAL_Delay(500);
 8000908:	e7eb      	b.n	80008e2 <main+0x22>
 800090a:	bf00      	nop
 800090c:	20000128 	.word	0x20000128
 8000910:	200000e4 	.word	0x200000e4

08000914 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b090      	sub	sp, #64	; 0x40
 8000918:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	2228      	movs	r2, #40	; 0x28
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fa64 	bl	8002df0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000952:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f971 	bl	8001c44 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x58>
		Error_Handler();
 8000968:	f000 f8da 	bl	8000b20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fbde 	bl	8002148 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x82>
		Error_Handler();
 8000992:	f000 f8c5 	bl	8000b20 <Error_Handler>
	}
}
 8000996:	bf00      	nop
 8000998:	3740      	adds	r7, #64	; 0x40
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009d4:	2218      	movs	r2, #24
 80009d6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_SPI1_Init+0x64>)
 80009f2:	f001 fd41 	bl	8002478 <HAL_SPI_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_SPI1_Init+0x60>
		Error_Handler();
 80009fc:	f000 f890 	bl	8000b20 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	40013000 	.word	0x40013000

08000a0c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART2_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f001 ffe4 	bl	8002a10 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a4e:	f000 f867 	bl	8000b20 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0310 	and.w	r3, r3, #16
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_GPIO_Init+0xb4>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4815      	ldr	r0, [pc, #84]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ac4:	f001 f8a6 	bl	8001c14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ace:	f001 f8a1 	bl	8001c14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000aec:	f000 ff0e 	bl	800190c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af0:	2310      	movs	r3, #16
 8000af2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000b08:	f000 ff00 	bl	800190c <HAL_GPIO_Init>

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000b3a:	f107 0208 	add.w	r2, r7, #8
 8000b3e:	f107 010c 	add.w	r1, r7, #12
 8000b42:	230a      	movs	r3, #10
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2301      	movs	r3, #1
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <SPI1SendByte+0x2c>)
 8000b4a:	f001 fd19 	bl	8002580 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000b4e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000008c 	.word	0x2000008c

08000b5c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <SPI1_WriteReg+0x3c>)
 8000b72:	f001 f84f 	bl	8001c14 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ffd7 	bl	8000b2c <SPI1SendByte>
	SPI1SendByte(value);
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffd3 	bl	8000b2c <SPI1SendByte>
	cs_set();
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <SPI1_WriteReg+0x3c>)
 8000b8c:	f001 f842 	bl	8001c14 <HAL_GPIO_WritePin>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40010800 	.word	0x40010800

08000b9c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <SPI1_ReadReg+0x3c>)
 8000bac:	f001 f832 	bl	8001c14 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffba 	bl	8000b2c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff ffb7 	bl	8000b2c <SPI1SendByte>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <SPI1_ReadReg+0x3c>)
 8000bc8:	f001 f824 	bl	8001c14 <HAL_GPIO_WritePin>
	return val;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010800 	.word	0x40010800

08000bdc <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000bf6:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffac 	bl	8000b5c <SPI1_WriteReg>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ffb5 	bl	8000b9c <SPI1_ReadReg>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffda 	bl	8000c0c <MFRC522_ReadRegister>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffb8 	bl	8000bdc <MFRC522_WriteRegister>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffc0 	bl	8000c0c <MFRC522_ReadRegister>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b25a      	sxtb	r2, r3
 8000c90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff9a 	bl	8000bdc <MFRC522_WriteRegister>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	200d      	movs	r0, #13
 8000cc0:	f7ff ff8c 	bl	8000bdc <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	6839      	ldr	r1, [r7, #0]
 8000cd6:	200c      	movs	r0, #12
 8000cd8:	f000 f80f 	bl	8000cfa <MFRC522_ToCard>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <MFRC522_Request+0x3c>
 8000ce6:	89bb      	ldrh	r3, [r7, #12]
 8000ce8:	2b10      	cmp	r3, #16
 8000cea:	d001      	beq.n	8000cf0 <MFRC522_Request+0x40>
 8000cec:	2302      	movs	r3, #2
 8000cee:	73fb      	strb	r3, [r7, #15]
	return status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000cfa:	b590      	push	{r4, r7, lr}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4603      	mov	r3, r0
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000d10:	2300      	movs	r3, #0
 8000d12:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b0c      	cmp	r3, #12
 8000d1c:	d006      	beq.n	8000d2c <MFRC522_ToCard+0x32>
 8000d1e:	2b0e      	cmp	r3, #14
 8000d20:	d109      	bne.n	8000d36 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000d22:	2312      	movs	r3, #18
 8000d24:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000d26:	2310      	movs	r3, #16
 8000d28:	757b      	strb	r3, [r7, #21]
			break;
 8000d2a:	e005      	b.n	8000d38 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000d2c:	2377      	movs	r3, #119	; 0x77
 8000d2e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000d30:	2330      	movs	r3, #48	; 0x30
 8000d32:	757b      	strb	r3, [r7, #21]
			break;
 8000d34:	e000      	b.n	8000d38 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000d36:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000d38:	7dbb      	ldrb	r3, [r7, #22]
 8000d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4619      	mov	r1, r3
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff ff4a 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f7ff ff92 	bl	8000c74 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	200a      	movs	r0, #10
 8000d54:	f7ff ff74 	bl	8000c40 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff ff3e 	bl	8000bdc <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000d60:	2300      	movs	r3, #0
 8000d62:	827b      	strh	r3, [r7, #18]
 8000d64:	e00a      	b.n	8000d7c <MFRC522_ToCard+0x82>
 8000d66:	8a7b      	ldrh	r3, [r7, #18]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	2009      	movs	r0, #9
 8000d72:	f7ff ff33 	bl	8000bdc <MFRC522_WriteRegister>
 8000d76:	8a7b      	ldrh	r3, [r7, #18]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	827b      	strh	r3, [r7, #18]
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	8a7a      	ldrh	r2, [r7, #18]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3ef      	bcc.n	8000d66 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff26 	bl	8000bdc <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b0c      	cmp	r3, #12
 8000d94:	d103      	bne.n	8000d9e <MFRC522_ToCard+0xa4>
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f7ff ff51 	bl	8000c40 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000d9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000da2:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000da4:	2004      	movs	r0, #4
 8000da6:	f7ff ff31 	bl	8000c0c <MFRC522_ReadRegister>
 8000daa:	4603      	mov	r3, r0
 8000dac:	753b      	strb	r3, [r7, #20]
		i--;
 8000dae:	8a7b      	ldrh	r3, [r7, #18]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000db4:	8a7b      	ldrh	r3, [r7, #18]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <MFRC522_ToCard+0xd6>
 8000dba:	7d3b      	ldrb	r3, [r7, #20]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <MFRC522_ToCard+0xd6>
 8000dc4:	7d3a      	ldrb	r2, [r7, #20]
 8000dc6:	7d7b      	ldrb	r3, [r7, #21]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0e9      	beq.n	8000da4 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f7ff ff4e 	bl	8000c74 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000dd8:	8a7b      	ldrh	r3, [r7, #18]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d057      	beq.n	8000e8e <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000dde:	2006      	movs	r0, #6
 8000de0:	f7ff ff14 	bl	8000c0c <MFRC522_ReadRegister>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f003 031b 	and.w	r3, r3, #27
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d14d      	bne.n	8000e8a <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000df2:	7d3a      	ldrb	r2, [r7, #20]
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	4013      	ands	r3, r2
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MFRC522_ToCard+0x10c>
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b0c      	cmp	r3, #12
 8000e0a:	d140      	bne.n	8000e8e <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f7ff fefd 	bl	8000c0c <MFRC522_ReadRegister>
 8000e12:	4603      	mov	r3, r0
 8000e14:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000e16:	200c      	movs	r0, #12
 8000e18:	f7ff fef8 	bl	8000c0c <MFRC522_ReadRegister>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000e24:	7c7b      	ldrb	r3, [r7, #17]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00b      	beq.n	8000e42 <MFRC522_ToCard+0x148>
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	7c7b      	ldrb	r3, [r7, #17]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3e:	801a      	strh	r2, [r3, #0]
 8000e40:	e005      	b.n	8000e4e <MFRC522_ToCard+0x154>
 8000e42:	7d3b      	ldrb	r3, [r7, #20]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000e4e:	7d3b      	ldrb	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <MFRC522_ToCard+0x15e>
 8000e54:	2301      	movs	r3, #1
 8000e56:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000e58:	7d3b      	ldrb	r3, [r7, #20]
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	d901      	bls.n	8000e62 <MFRC522_ToCard+0x168>
 8000e5e:	2310      	movs	r3, #16
 8000e60:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000e62:	2300      	movs	r3, #0
 8000e64:	827b      	strh	r3, [r7, #18]
 8000e66:	e00a      	b.n	8000e7e <MFRC522_ToCard+0x184>
 8000e68:	8a7b      	ldrh	r3, [r7, #18]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	18d4      	adds	r4, r2, r3
 8000e6e:	2009      	movs	r0, #9
 8000e70:	f7ff fecc 	bl	8000c0c <MFRC522_ReadRegister>
 8000e74:	4603      	mov	r3, r0
 8000e76:	7023      	strb	r3, [r4, #0]
 8000e78:	8a7b      	ldrh	r3, [r7, #18]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	827b      	strh	r3, [r7, #18]
 8000e7e:	7d3b      	ldrb	r3, [r7, #20]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	8a7a      	ldrh	r2, [r7, #18]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3ef      	bcc.n	8000e68 <MFRC522_ToCard+0x16e>
 8000e88:	e001      	b.n	8000e8e <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}

08000e98 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff fe98 	bl	8000bdc <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2293      	movs	r2, #147	; 0x93
 8000eb0:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000eba:	f107 030a 	add.w	r3, r7, #10
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f7ff ff17 	bl	8000cfa <MFRC522_ToCard>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d118      	bne.n	8000f08 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]
 8000eda:	e009      	b.n	8000ef0 <MFRC522_Anticoll+0x58>
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	7b7b      	ldrb	r3, [r7, #13]
 8000ee6:	4053      	eors	r3, r2
 8000ee8:	737b      	strb	r3, [r7, #13]
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	3301      	adds	r3, #1
 8000eee:	73bb      	strb	r3, [r7, #14]
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d9f2      	bls.n	8000edc <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	7b7a      	ldrb	r2, [r7, #13]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d001      	beq.n	8000f08 <MFRC522_Anticoll+0x70>
 8000f04:	2302      	movs	r3, #2
 8000f06:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8000f12:	b590      	push	{r4, r7, lr}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8000f20:	2104      	movs	r1, #4
 8000f22:	2005      	movs	r0, #5
 8000f24:	f7ff fea6 	bl	8000c74 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	f7ff fe88 	bl	8000c40 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000f30:	2300      	movs	r3, #0
 8000f32:	75fb      	strb	r3, [r7, #23]
 8000f34:	e00a      	b.n	8000f4c <MFRC522_CalculateCRC+0x3a>
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2009      	movs	r0, #9
 8000f42:	f7ff fe4b 	bl	8000bdc <MFRC522_WriteRegister>
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	75fb      	strb	r3, [r7, #23]
 8000f4c:	7dfa      	ldrb	r2, [r7, #23]
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3f0      	bcc.n	8000f36 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000f54:	2103      	movs	r1, #3
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fe40 	bl	8000bdc <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8000f5c:	23ff      	movs	r3, #255	; 0xff
 8000f5e:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f7ff fe53 	bl	8000c0c <MFRC522_ReadRegister>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75bb      	strb	r3, [r7, #22]
		i--;
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <MFRC522_CalculateCRC+0x6e>
 8000f76:	7dbb      	ldrb	r3, [r7, #22]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ef      	beq.n	8000f60 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8000f80:	2022      	movs	r0, #34	; 0x22
 8000f82:	f7ff fe43 	bl	8000c0c <MFRC522_ReadRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1c5c      	adds	r4, r3, #1
 8000f92:	2021      	movs	r0, #33	; 0x21
 8000f94:	f7ff fe3a 	bl	8000c0c <MFRC522_ReadRegister>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	7023      	strb	r3, [r4, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 8000fac:	2393      	movs	r3, #147	; 0x93
 8000fae:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 8000fb0:	2370      	movs	r3, #112	; 0x70
 8000fb2:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e00c      	b.n	8000fd4 <MFRC522_SelectTag+0x30>
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	3318      	adds	r3, #24
 8000fc8:	443b      	add	r3, r7
 8000fca:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	75fb      	strb	r3, [r7, #23]
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d9ef      	bls.n	8000fba <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	1dda      	adds	r2, r3, #7
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff93 	bl	8000f12 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	f107 0108 	add.w	r1, r7, #8
 8000ff4:	f107 0312 	add.w	r3, r7, #18
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	200c      	movs	r0, #12
 8001000:	f7ff fe7b 	bl	8000cfa <MFRC522_ToCard>
 8001004:	4603      	mov	r3, r0
 8001006:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <MFRC522_SelectTag+0x76>
 800100e:	8a7b      	ldrh	r3, [r7, #18]
 8001010:	2b18      	cmp	r3, #24
 8001012:	d102      	bne.n	800101a <MFRC522_SelectTag+0x76>
 8001014:	7a3b      	ldrb	r3, [r7, #8]
 8001016:	75bb      	strb	r3, [r7, #22]
 8001018:	e001      	b.n	800101e <MFRC522_SelectTag+0x7a>
 800101a:	2300      	movs	r3, #0
 800101c:	75bb      	strb	r3, [r7, #22]
	return size;
 800101e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af02      	add	r7, sp, #8
 800102e:	60ba      	str	r2, [r7, #8]
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	460b      	mov	r3, r1
 8001038:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 8001042:	2300      	movs	r3, #0
 8001044:	77bb      	strb	r3, [r7, #30]
 8001046:	e00c      	b.n	8001062 <MFRC522_Auth+0x3a>
 8001048:	7fbb      	ldrb	r3, [r7, #30]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	441a      	add	r2, r3
 800104e:	7fbb      	ldrb	r3, [r7, #30]
 8001050:	3302      	adds	r3, #2
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	3320      	adds	r3, #32
 8001056:	443b      	add	r3, r7
 8001058:	f803 2c10 	strb.w	r2, [r3, #-16]
 800105c:	7fbb      	ldrb	r3, [r7, #30]
 800105e:	3301      	adds	r3, #1
 8001060:	77bb      	strb	r3, [r7, #30]
 8001062:	7fbb      	ldrb	r3, [r7, #30]
 8001064:	2b05      	cmp	r3, #5
 8001066:	d9ef      	bls.n	8001048 <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 8001068:	2300      	movs	r3, #0
 800106a:	77bb      	strb	r3, [r7, #30]
 800106c:	e00c      	b.n	8001088 <MFRC522_Auth+0x60>
 800106e:	7fbb      	ldrb	r3, [r7, #30]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	441a      	add	r2, r3
 8001074:	7fbb      	ldrb	r3, [r7, #30]
 8001076:	3308      	adds	r3, #8
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	3320      	adds	r3, #32
 800107c:	443b      	add	r3, r7
 800107e:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001082:	7fbb      	ldrb	r3, [r7, #30]
 8001084:	3301      	adds	r3, #1
 8001086:	77bb      	strb	r3, [r7, #30]
 8001088:	7fbb      	ldrb	r3, [r7, #30]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d9ef      	bls.n	800106e <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800108e:	f107 0210 	add.w	r2, r7, #16
 8001092:	f107 0110 	add.w	r1, r7, #16
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4613      	mov	r3, r2
 800109e:	220c      	movs	r2, #12
 80010a0:	200e      	movs	r0, #14
 80010a2:	f7ff fe2a 	bl	8000cfa <MFRC522_ToCard>
 80010a6:	4603      	mov	r3, r0
 80010a8:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <MFRC522_Auth+0x98>
 80010b0:	2008      	movs	r0, #8
 80010b2:	f7ff fdab 	bl	8000c0c <MFRC522_ReadRegister>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <MFRC522_Auth+0x9c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	77fb      	strb	r3, [r7, #31]
	return status;
 80010c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af02      	add	r7, sp, #8
 80010d4:	4603      	mov	r3, r0
 80010d6:	6039      	str	r1, [r7, #0]
 80010d8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2230      	movs	r2, #48	; 0x30
 80010de:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	79fa      	ldrb	r2, [r7, #7]
 80010e6:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3302      	adds	r3, #2
 80010ec:	461a      	mov	r2, r3
 80010ee:	2102      	movs	r1, #2
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f7ff ff0e 	bl	8000f12 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2204      	movs	r2, #4
 8001100:	6839      	ldr	r1, [r7, #0]
 8001102:	200c      	movs	r0, #12
 8001104:	f7ff fdf9 	bl	8000cfa <MFRC522_ToCard>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <MFRC522_Read+0x4a>
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	2b90      	cmp	r3, #144	; 0x90
 8001116:	d001      	beq.n	800111c <MFRC522_Read+0x4e>
 8001118:	2302      	movs	r3, #2
 800111a:	73fb      	strb	r3, [r7, #15]
	return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <MFRC522_Write>:

uint8_t MFRC522_Write(uint8_t blockAddr, uint8_t* writeData) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b08a      	sub	sp, #40	; 0x28
 800112a:	af02      	add	r7, sp, #8
 800112c:	4603      	mov	r3, r0
 800112e:	6039      	str	r1, [r7, #0]
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[18]; 

	buff[0] = PICC_WRITE;
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	723b      	strb	r3, [r7, #8]
	buff[1] = blockAddr;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	727b      	strb	r3, [r7, #9]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	1c9a      	adds	r2, r3, #2
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fee3 	bl	8000f12 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 800114c:	f107 0208 	add.w	r2, r7, #8
 8001150:	f107 0108 	add.w	r1, r7, #8
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4613      	mov	r3, r2
 800115c:	2204      	movs	r2, #4
 800115e:	200c      	movs	r0, #12
 8001160:	f7ff fdcb 	bl	8000cfa <MFRC522_ToCard>
 8001164:	4603      	mov	r3, r0
 8001166:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <MFRC522_Write+0x58>
 800116e:	8bbb      	ldrh	r3, [r7, #28]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d104      	bne.n	800117e <MFRC522_Write+0x58>
 8001174:	7a3b      	ldrb	r3, [r7, #8]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d001      	beq.n	8001182 <MFRC522_Write+0x5c>
 800117e:	2302      	movs	r3, #2
 8001180:	77fb      	strb	r3, [r7, #31]
	if (status == MI_OK) {
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d136      	bne.n	80011f6 <MFRC522_Write+0xd0>
		// Data to the FIFO write 16Byte
		for (i = 0; i < 16; i++) buff[i] = *(writeData+i);
 8001188:	2300      	movs	r3, #0
 800118a:	77bb      	strb	r3, [r7, #30]
 800118c:	e00b      	b.n	80011a6 <MFRC522_Write+0x80>
 800118e:	7fbb      	ldrb	r3, [r7, #30]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	441a      	add	r2, r3
 8001194:	7fbb      	ldrb	r3, [r7, #30]
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	3320      	adds	r3, #32
 800119a:	443b      	add	r3, r7
 800119c:	f803 2c18 	strb.w	r2, [r3, #-24]
 80011a0:	7fbb      	ldrb	r3, [r7, #30]
 80011a2:	3301      	adds	r3, #1
 80011a4:	77bb      	strb	r3, [r7, #30]
 80011a6:	7fbb      	ldrb	r3, [r7, #30]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d9f0      	bls.n	800118e <MFRC522_Write+0x68>
		MFRC522_CalculateCRC(buff, 16, &buff[16]);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	f103 0210 	add.w	r2, r3, #16
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2110      	movs	r1, #16
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fea9 	bl	8000f12 <MFRC522_CalculateCRC>
		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	f107 0108 	add.w	r1, r7, #8
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4613      	mov	r3, r2
 80011d0:	2212      	movs	r2, #18
 80011d2:	200c      	movs	r0, #12
 80011d4:	f7ff fd91 	bl	8000cfa <MFRC522_ToCard>
 80011d8:	4603      	mov	r3, r0
 80011da:	77fb      	strb	r3, [r7, #31]
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
 80011dc:	7ffb      	ldrb	r3, [r7, #31]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <MFRC522_Write+0xcc>
 80011e2:	8bbb      	ldrh	r3, [r7, #28]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d104      	bne.n	80011f2 <MFRC522_Write+0xcc>
 80011e8:	7a3b      	ldrb	r3, [r7, #8]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d001      	beq.n	80011f6 <MFRC522_Write+0xd0>
 80011f2:	2302      	movs	r3, #2
 80011f4:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <MFRC522_Init>:

void MFRC522_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001204:	f000 f820 	bl	8001248 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001208:	218d      	movs	r1, #141	; 0x8d
 800120a:	202a      	movs	r0, #42	; 0x2a
 800120c:	f7ff fce6 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001210:	213e      	movs	r1, #62	; 0x3e
 8001212:	202b      	movs	r0, #43	; 0x2b
 8001214:	f7ff fce2 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001218:	211e      	movs	r1, #30
 800121a:	202d      	movs	r0, #45	; 0x2d
 800121c:	f7ff fcde 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	202c      	movs	r0, #44	; 0x2c
 8001224:	f7ff fcda 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001228:	2170      	movs	r1, #112	; 0x70
 800122a:	2026      	movs	r0, #38	; 0x26
 800122c:	f7ff fcd6 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001230:	2140      	movs	r1, #64	; 0x40
 8001232:	2015      	movs	r0, #21
 8001234:	f7ff fcd2 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001238:	213d      	movs	r1, #61	; 0x3d
 800123a:	2011      	movs	r0, #17
 800123c:	f7ff fcce 	bl	8000bdc <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001240:	f000 f80a 	bl	8001258 <MFRC522_AntennaOn>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800124c:	210f      	movs	r1, #15
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff fcc4 	bl	8000bdc <MFRC522_WriteRegister>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800125e:	2014      	movs	r0, #20
 8001260:	f7ff fcd4 	bl	8000c0c <MFRC522_ReadRegister>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <MFRC522_AntennaOn+0x22>
 8001272:	2103      	movs	r1, #3
 8001274:	2014      	movs	r0, #20
 8001276:	f7ff fce3 	bl	8000c40 <MFRC522_SetBitMask>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_MspInit+0x5c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x60>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_MspInit+0x60>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_SPI_MspInit+0x88>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d12f      	bne.n	8001368 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800130e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <HAL_SPI_MspInit+0x90>)
 800134c:	f000 fade 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_SPI_MspInit+0x90>)
 8001364:	f000 fad2 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013000 	.word	0x40013000
 8001374:	40021000 	.word	0x40021000
 8001378:	40010800 	.word	0x40010800

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_UART_MspInit+0x88>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d12f      	bne.n	80013fc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_UART_MspInit+0x8c>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013cc:	2304      	movs	r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <HAL_UART_MspInit+0x90>)
 80013e0:	f000 fa94 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e4:	2308      	movs	r3, #8
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0x90>)
 80013f8:	f000 fa88 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

 }
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f935 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	f001 fc83 	bl	8002d80 <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2216      	movs	r2, #22
 800147e:	601a      	str	r2, [r3, #0]
  return -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_exit>:

void _exit (int status)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe7 	bl	800146c <_kill>
  while (1) {}    /* Make sure we hang here */
 800149e:	e7fe      	b.n	800149e <_exit+0x12>

080014a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00a      	b.n	80014c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b2:	f3af 8000 	nop.w
 80014b6:	4601      	mov	r1, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf0      	blt.n	80014b2 <_read+0x12>
  }

  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e009      	b.n	8001500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf1      	blt.n	80014ec <_write+0x12>
  }
  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	605a      	str	r2, [r3, #4]
  return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <_isatty>:

int _isatty(int file)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f001 fbec 	bl	8002d80 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20005000 	.word	0x20005000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	2000023c 	.word	0x2000023c
 80015dc:	20000258 	.word	0x20000258

080015e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001612:	f7ff ffe5 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f001 fbb9 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161a:	f7ff f951 	bl	80008c0 <main>
  bx lr
 800161e:	4770      	bx	lr
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001628:	080044bc 	.word	0x080044bc
  ldr r2, =_sbss
 800162c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001630:	20000254 	.word	0x20000254

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f92b 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fe16 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f935 	bl	80018f2 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f90b 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_IncTick+0x20>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000240 	.word	0x20000240

080016e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_GetTick+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000240 	.word	0x20000240

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff fff0 	bl	80016e8 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffe0 	bl	80016e8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff90 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff49 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff5e 	bl	800178c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff90 	bl	80017fc <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5f 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb0 	bl	8001860 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e169      	b.n	8001bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001920:	2201      	movs	r2, #1
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8158 	bne.w	8001bee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a9a      	ldr	r2, [pc, #616]	; (8001bac <HAL_GPIO_Init+0x2a0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d05e      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001948:	4a98      	ldr	r2, [pc, #608]	; (8001bac <HAL_GPIO_Init+0x2a0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d875      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800194e:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_GPIO_Init+0x2a4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d058      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001954:	4a96      	ldr	r2, [pc, #600]	; (8001bb0 <HAL_GPIO_Init+0x2a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d86f      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800195a:	4a96      	ldr	r2, [pc, #600]	; (8001bb4 <HAL_GPIO_Init+0x2a8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001960:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <HAL_GPIO_Init+0x2a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d869      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001966:	4a94      	ldr	r2, [pc, #592]	; (8001bb8 <HAL_GPIO_Init+0x2ac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04c      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 800196c:	4a92      	ldr	r2, [pc, #584]	; (8001bb8 <HAL_GPIO_Init+0x2ac>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d863      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001972:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_GPIO_Init+0x2b0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d046      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001978:	4a90      	ldr	r2, [pc, #576]	; (8001bbc <HAL_GPIO_Init+0x2b0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d85d      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d82a      	bhi.n	80019d8 <HAL_GPIO_Init+0xcc>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d859      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_GPIO_Init+0x80>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a07 	.word	0x08001a07
 8001990:	080019e1 	.word	0x080019e1
 8001994:	080019f3 	.word	0x080019f3
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a3b 	.word	0x08001a3b
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a3b 	.word	0x08001a3b
 80019ac:	08001a3b 	.word	0x08001a3b
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a3b 	.word	0x08001a3b
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a3b 	.word	0x08001a3b
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a3b 	.word	0x08001a3b
 80019c8:	08001a3b 	.word	0x08001a3b
 80019cc:	08001a3b 	.word	0x08001a3b
 80019d0:	080019e9 	.word	0x080019e9
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	4a79      	ldr	r2, [pc, #484]	; (8001bc0 <HAL_GPIO_Init+0x2b4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e029      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e024      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01f      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e01a      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e013      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          break;
 8001a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_Init+0x13a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_Init+0x13e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_Init+0x14c>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x152>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	6a39      	ldr	r1, [r7, #32]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80b1 	beq.w	8001bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x2b8>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <HAL_GPIO_Init+0x2bc>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a40      	ldr	r2, [pc, #256]	; (8001bcc <HAL_GPIO_Init+0x2c0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00d      	beq.n	8001af4 <HAL_GPIO_Init+0x1e8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d007      	beq.n	8001af0 <HAL_GPIO_Init+0x1e4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_GPIO_Init+0x1e0>
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e006      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e004      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_GPIO_Init+0x1ee>
 8001af8:	2300      	movs	r3, #0
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0a:	492f      	ldr	r1, [pc, #188]	; (8001bc8 <HAL_GPIO_Init+0x2bc>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	492c      	ldr	r1, [pc, #176]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4928      	ldr	r1, [pc, #160]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4922      	ldr	r1, [pc, #136]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491e      	ldr	r1, [pc, #120]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4918      	ldr	r1, [pc, #96]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4914      	ldr	r1, [pc, #80]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d021      	beq.n	8001be0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e021      	b.n	8001bee <HAL_GPIO_Init+0x2e2>
 8001baa:	bf00      	nop
 8001bac:	10320000 	.word	0x10320000
 8001bb0:	10310000 	.word	0x10310000
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10120000 	.word	0x10120000
 8001bc0:	10110000 	.word	0x10110000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40011400 	.word	0x40011400
 8001bdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4909      	ldr	r1, [pc, #36]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f47f ae8e 	bne.w	8001920 <HAL_GPIO_Init+0x14>
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	372c      	adds	r7, #44	; 0x2c
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e272      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8087 	beq.w	8001d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c64:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c70:	4b8f      	ldr	r3, [pc, #572]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d112      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5e>
 8001c7c:	4b8c      	ldr	r3, [pc, #560]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d10b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x12c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d168      	bne.n	8001d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e24c      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x76>
 8001cac:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a7f      	ldr	r2, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e02e      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x98>
 8001cc2:	4b7b      	ldr	r3, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a77      	ldr	r2, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0xbc>
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a71      	ldr	r2, [pc, #452]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001d00:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a67      	ldr	r2, [pc, #412]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fce2 	bl	80016e8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fcde 	bl	80016e8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e200      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe4>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fcce 	bl	80016e8 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fcca 	bl	80016e8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1ec      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x10c>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8a:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x18c>
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1c0      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4939      	ldr	r1, [pc, #228]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fc83 	bl	80016e8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff fc7f 	bl	80016e8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1a1      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4927      	ldr	r1, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc62 	bl	80016e8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc5e 	bl	80016e8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e180      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03a      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fc42 	bl	80016e8 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc3e 	bl	80016e8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e160      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f000 fad8 	bl	800243c <RCC_Delay>
 8001e8c:	e01c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fc28 	bl	80016e8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc24 	bl	80016e8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d908      	bls.n	8001ebc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e146      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	42420000 	.word	0x42420000
 8001eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e9      	bne.n	8001e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a6 	beq.w	8002022 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b8b      	ldr	r3, [pc, #556]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b88      	ldr	r3, [pc, #544]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a87      	ldr	r2, [pc, #540]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b85      	ldr	r3, [pc, #532]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b82      	ldr	r3, [pc, #520]	; (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7e      	ldr	r2, [pc, #504]	; (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fbe5 	bl	80016e8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7ff fbe1 	bl	80016e8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	; 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e103      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <HAL_RCC_OscConfig+0x4c8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x312>
 8001f48:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	e02d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x334>
 8001f5e:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a69      	ldr	r2, [pc, #420]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a66      	ldr	r2, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	e01c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x356>
 8001f80:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	4b5e      	ldr	r3, [pc, #376]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fb95 	bl	80016e8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fb91 	bl	80016e8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0b1      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x37e>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fb7f 	bl	80016e8 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fb7b 	bl	80016e8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e09b      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	4b40      	ldr	r3, [pc, #256]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002020:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8087 	beq.w	800213a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d061      	beq.n	80020fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d146      	bne.n	80020ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff fb4f 	bl	80016e8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff fb4b 	bl	80016e8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e06d      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d108      	bne.n	8002088 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4921      	ldr	r1, [pc, #132]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a19      	ldr	r1, [r3, #32]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	430b      	orrs	r3, r1
 800209a:	491b      	ldr	r1, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x4cc>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fb1f 	bl	80016e8 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff fb1b 	bl	80016e8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e03d      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x46a>
 80020cc:	e035      	b.n	800213a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_RCC_OscConfig+0x4cc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fb08 	bl	80016e8 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff fb04 	bl	80016e8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e026      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x498>
 80020fa:	e01e      	b.n	800213a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e019      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
 8002110:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x500>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4965      	ldr	r1, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d040      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e073      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff fa56 	bl	80016e8 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff fa52 	bl	80016e8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e053      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d210      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1cc>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f9b4 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	08004354 	.word	0x08004354
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b490      	push	{r4, r7}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002324:	1d3c      	adds	r4, r7, #4
 8002326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800232c:	f240 2301 	movw	r3, #513	; 0x201
 8002330:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d002      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x46>
 800235a:	e02b      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	e02b      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3328      	adds	r3, #40	; 0x28
 800236c:	443b      	add	r3, r7
 800236e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002372:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d012      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0c5b      	lsrs	r3, r3, #17
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	3328      	adds	r3, #40	; 0x28
 800238a:	443b      	add	r3, r7
 800238c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002390:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002396:	fb03 f202 	mul.w	r2, r3, r2
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e004      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	623b      	str	r3, [r7, #32]
      break;
 80023b2:	e002      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b6:	623b      	str	r3, [r7, #32]
      break;
 80023b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc90      	pop	{r4, r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	08004344 	.word	0x08004344
 80023cc:	40021000 	.word	0x40021000
 80023d0:	007a1200 	.word	0x007a1200
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000000 	.word	0x20000000

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f0:	f7ff fff2 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	08004364 	.word	0x08004364

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002418:	f7ff ffde 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0adb      	lsrs	r3, r3, #11
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	08004364 	.word	0x08004364

0800243c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <RCC_Delay+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <RCC_Delay+0x38>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002458:	bf00      	nop
  }
  while (Delay --);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <RCC_Delay+0x1c>
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000000 	.word	0x20000000
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e076      	b.n	8002578 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249a:	d009      	beq.n	80024b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe ff0c 	bl	80012e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	ea42 0103 	orr.w	r1, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	0c1a      	lsrs	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f002 0204 	and.w	r2, r2, #4
 8002556:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800258e:	2301      	movs	r3, #1
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_SPI_TransmitReceive+0x26>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e18a      	b.n	80028bc <HAL_SPI_TransmitReceive+0x33c>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ae:	f7ff f89b 	bl	80016e8 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d00f      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x70>
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d6:	d107      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0x68>
 80025e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d003      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025ee:	e15b      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x82>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x82>
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002608:	e14e      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b04      	cmp	r3, #4
 8002614:	d003      	beq.n	800261e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2205      	movs	r2, #5
 800261a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d007      	beq.n	8002672 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267a:	d178      	bne.n	800276e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_TransmitReceive+0x10a>
 8002684:	8b7b      	ldrh	r3, [r7, #26]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d166      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	1c9a      	adds	r2, r3, #2
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ae:	e053      	b.n	8002758 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d11b      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x176>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x176>
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d113      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	1c9a      	adds	r2, r3, #2
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d119      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x1b8>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	b292      	uxth	r2, r2
 800271a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002738:	f7fe ffd6 	bl	80016e8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002744:	429a      	cmp	r2, r3
 8002746:	d807      	bhi.n	8002758 <HAL_SPI_TransmitReceive+0x1d8>
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d003      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002756:	e0a7      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1a6      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x130>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1a1      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x130>
 800276c:	e07c      	b.n	8002868 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_SPI_TransmitReceive+0x1fc>
 8002776:	8b7b      	ldrh	r3, [r7, #26]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d16b      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a2:	e057      	b.n	8002854 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d11c      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x26c>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x26c>
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d114      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <HAL_SPI_TransmitReceive+0x2ae>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d014      	beq.n	800282e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800282a:	2301      	movs	r3, #1
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800282e:	f7fe ff5b 	bl	80016e8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800283a:	429a      	cmp	r2, r3
 800283c:	d803      	bhi.n	8002846 <HAL_SPI_TransmitReceive+0x2c6>
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d102      	bne.n	800284c <HAL_SPI_TransmitReceive+0x2cc>
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002852:	e029      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1a2      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x224>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d19d      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f8b1 	bl	80029d4 <SPI_EndRxTxTransaction>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002884:	e010      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	e000      	b.n	80028a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3730      	adds	r7, #48	; 0x30
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028d4:	f7fe ff08 	bl	80016e8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028e4:	f7fe ff00 	bl	80016e8 <HAL_GetTick>
 80028e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	015b      	lsls	r3, r3, #5
 80028f0:	0d1b      	lsrs	r3, r3, #20
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028fa:	e054      	b.n	80029a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d050      	beq.n	80029a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002904:	f7fe fef0 	bl	80016e8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	429a      	cmp	r2, r3
 8002912:	d902      	bls.n	800291a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d13d      	bne.n	8002996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002932:	d111      	bne.n	8002958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293c:	d004      	beq.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d107      	bne.n	8002958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002960:	d10f      	bne.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e017      	b.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d19b      	bne.n	80028fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff6a 	bl	80028c4 <SPI_WaitFlagStateUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e000      	b.n	8002a08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e03f      	b.n	8002aa2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fca0 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f905 	bl	8002c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b08a      	sub	sp, #40	; 0x28
 8002aae:	af02      	add	r7, sp, #8
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d17c      	bne.n	8002bc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_UART_Transmit+0x2c>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e075      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Transmit+0x3e>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e06e      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	; 0x21
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fdf3 	bl	80016e8 <HAL_GetTick>
 8002b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b18:	d108      	bne.n	8002b2c <HAL_UART_Transmit+0x82>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e003      	b.n	8002b34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b3c:	e02a      	b.n	8002b94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f840 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e036      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	3302      	adds	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e007      	b.n	8002b86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3301      	adds	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1cf      	bne.n	8002b3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f810 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e006      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bde:	e02c      	b.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d028      	beq.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002bee:	f7fe fd7b 	bl	80016e8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d21d      	bcs.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e00f      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0c3      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c9e:	f023 030c 	bic.w	r3, r3, #12
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <UART_SetConfig+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7ff fba2 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f7ff fb8a 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	0119      	lsls	r1, r3, #4
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <UART_SetConfig+0x118>)
 8002d12:	fba3 0302 	umull	r0, r3, r3, r2
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2064      	movs	r0, #100	; 0x64
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	; 0x32
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <UART_SetConfig+0x118>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	4419      	add	r1, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <UART_SetConfig+0x118>)
 8002d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2064      	movs	r0, #100	; 0x64
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <UART_SetConfig+0x118>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <__errno>:
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <__errno+0x8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4d0c      	ldr	r5, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f001 fa6a 	bl	8004274 <_init>
 8002da0:	2600      	movs	r6, #0
 8002da2:	4d0a      	ldr	r5, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	080044b4 	.word	0x080044b4
 8002dc8:	080044b4 	.word	0x080044b4
 8002dcc:	080044b4 	.word	0x080044b4
 8002dd0:	080044b8 	.word	0x080044b8

08002dd4 <memcpy>:
 8002dd4:	440a      	add	r2, r1
 8002dd6:	4291      	cmp	r1, r2
 8002dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ddc:	d100      	bne.n	8002de0 <memcpy+0xc>
 8002dde:	4770      	bx	lr
 8002de0:	b510      	push	{r4, lr}
 8002de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002de6:	4291      	cmp	r1, r2
 8002de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dec:	d1f9      	bne.n	8002de2 <memcpy+0xe>
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <memset>:
 8002df0:	4603      	mov	r3, r0
 8002df2:	4402      	add	r2, r0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d100      	bne.n	8002dfa <memset+0xa>
 8002df8:	4770      	bx	lr
 8002dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfe:	e7f9      	b.n	8002df4 <memset+0x4>

08002e00 <srand>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <srand+0x44>)
 8002e04:	4604      	mov	r4, r0
 8002e06:	681d      	ldr	r5, [r3, #0]
 8002e08:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e0a:	b9b3      	cbnz	r3, 8002e3a <srand+0x3a>
 8002e0c:	2018      	movs	r0, #24
 8002e0e:	f000 f8b3 	bl	8002f78 <malloc>
 8002e12:	4602      	mov	r2, r0
 8002e14:	63a8      	str	r0, [r5, #56]	; 0x38
 8002e16:	b920      	cbnz	r0, 8002e22 <srand+0x22>
 8002e18:	2142      	movs	r1, #66	; 0x42
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <srand+0x48>)
 8002e1c:	480b      	ldr	r0, [pc, #44]	; (8002e4c <srand+0x4c>)
 8002e1e:	f000 f87b 	bl	8002f18 <__assert_func>
 8002e22:	490b      	ldr	r1, [pc, #44]	; (8002e50 <srand+0x50>)
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <srand+0x54>)
 8002e26:	e9c0 1300 	strd	r1, r3, [r0]
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <srand+0x58>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	6083      	str	r3, [r0, #8]
 8002e30:	230b      	movs	r3, #11
 8002e32:	8183      	strh	r3, [r0, #12]
 8002e34:	2001      	movs	r0, #1
 8002e36:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e3e:	611c      	str	r4, [r3, #16]
 8002e40:	615a      	str	r2, [r3, #20]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	2000000c 	.word	0x2000000c
 8002e48:	08004370 	.word	0x08004370
 8002e4c:	08004387 	.word	0x08004387
 8002e50:	abcd330e 	.word	0xabcd330e
 8002e54:	e66d1234 	.word	0xe66d1234
 8002e58:	0005deec 	.word	0x0005deec

08002e5c <rand>:
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <rand+0x5c>)
 8002e5e:	b510      	push	{r4, lr}
 8002e60:	681c      	ldr	r4, [r3, #0]
 8002e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e64:	b9b3      	cbnz	r3, 8002e94 <rand+0x38>
 8002e66:	2018      	movs	r0, #24
 8002e68:	f000 f886 	bl	8002f78 <malloc>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002e70:	b920      	cbnz	r0, 8002e7c <rand+0x20>
 8002e72:	214e      	movs	r1, #78	; 0x4e
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <rand+0x60>)
 8002e76:	4812      	ldr	r0, [pc, #72]	; (8002ec0 <rand+0x64>)
 8002e78:	f000 f84e 	bl	8002f18 <__assert_func>
 8002e7c:	4911      	ldr	r1, [pc, #68]	; (8002ec4 <rand+0x68>)
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <rand+0x6c>)
 8002e80:	e9c0 1300 	strd	r1, r3, [r0]
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <rand+0x70>)
 8002e86:	2100      	movs	r1, #0
 8002e88:	6083      	str	r3, [r0, #8]
 8002e8a:	230b      	movs	r3, #11
 8002e8c:	8183      	strh	r3, [r0, #12]
 8002e8e:	2001      	movs	r0, #1
 8002e90:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002e94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <rand+0x74>)
 8002e98:	6920      	ldr	r0, [r4, #16]
 8002e9a:	6963      	ldr	r3, [r4, #20]
 8002e9c:	4342      	muls	r2, r0
 8002e9e:	490d      	ldr	r1, [pc, #52]	; (8002ed4 <rand+0x78>)
 8002ea0:	fb01 2203 	mla	r2, r1, r3, r2
 8002ea4:	fba0 0101 	umull	r0, r1, r0, r1
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	eb42 0001 	adc.w	r0, r2, r1
 8002eae:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002eb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002eb6:	bd10      	pop	{r4, pc}
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	08004370 	.word	0x08004370
 8002ec0:	08004387 	.word	0x08004387
 8002ec4:	abcd330e 	.word	0xabcd330e
 8002ec8:	e66d1234 	.word	0xe66d1234
 8002ecc:	0005deec 	.word	0x0005deec
 8002ed0:	5851f42d 	.word	0x5851f42d
 8002ed4:	4c957f2d 	.word	0x4c957f2d

08002ed8 <siprintf>:
 8002ed8:	b40e      	push	{r1, r2, r3}
 8002eda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ede:	b500      	push	{lr}
 8002ee0:	b09c      	sub	sp, #112	; 0x70
 8002ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ee4:	9002      	str	r0, [sp, #8]
 8002ee6:	9006      	str	r0, [sp, #24]
 8002ee8:	9107      	str	r1, [sp, #28]
 8002eea:	9104      	str	r1, [sp, #16]
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <siprintf+0x38>)
 8002eee:	4909      	ldr	r1, [pc, #36]	; (8002f14 <siprintf+0x3c>)
 8002ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ef4:	9105      	str	r1, [sp, #20]
 8002ef6:	6800      	ldr	r0, [r0, #0]
 8002ef8:	a902      	add	r1, sp, #8
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	f000 f97c 	bl	80031f8 <_svfiprintf_r>
 8002f00:	2200      	movs	r2, #0
 8002f02:	9b02      	ldr	r3, [sp, #8]
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	b01c      	add	sp, #112	; 0x70
 8002f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f0c:	b003      	add	sp, #12
 8002f0e:	4770      	bx	lr
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	ffff0208 	.word	0xffff0208

08002f18 <__assert_func>:
 8002f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f1a:	4614      	mov	r4, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <__assert_func+0x2c>)
 8002f20:	4605      	mov	r5, r0
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68d8      	ldr	r0, [r3, #12]
 8002f26:	b14c      	cbz	r4, 8002f3c <__assert_func+0x24>
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <__assert_func+0x30>)
 8002f2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002f2e:	9100      	str	r1, [sp, #0]
 8002f30:	462b      	mov	r3, r5
 8002f32:	4906      	ldr	r1, [pc, #24]	; (8002f4c <__assert_func+0x34>)
 8002f34:	f000 f80e 	bl	8002f54 <fiprintf>
 8002f38:	f000 fe1c 	bl	8003b74 <abort>
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <__assert_func+0x38>)
 8002f3e:	461c      	mov	r4, r3
 8002f40:	e7f3      	b.n	8002f2a <__assert_func+0x12>
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	080043e2 	.word	0x080043e2
 8002f4c:	080043ef 	.word	0x080043ef
 8002f50:	0800441d 	.word	0x0800441d

08002f54 <fiprintf>:
 8002f54:	b40e      	push	{r1, r2, r3}
 8002f56:	b503      	push	{r0, r1, lr}
 8002f58:	4601      	mov	r1, r0
 8002f5a:	ab03      	add	r3, sp, #12
 8002f5c:	4805      	ldr	r0, [pc, #20]	; (8002f74 <fiprintf+0x20>)
 8002f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f62:	6800      	ldr	r0, [r0, #0]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	f000 fa6f 	bl	8003448 <_vfiprintf_r>
 8002f6a:	b002      	add	sp, #8
 8002f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f70:	b003      	add	sp, #12
 8002f72:	4770      	bx	lr
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <malloc>:
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <malloc+0xc>)
 8002f7a:	4601      	mov	r1, r0
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	f000 b86b 	b.w	8003058 <_malloc_r>
 8002f82:	bf00      	nop
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <_free_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	d040      	beq.n	8003012 <_free_r+0x8a>
 8002f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f94:	1f0c      	subs	r4, r1, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bfb8      	it	lt
 8002f9a:	18e4      	addlt	r4, r4, r3
 8002f9c:	f001 f836 	bl	800400c <__malloc_lock>
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <_free_r+0x8c>)
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	b933      	cbnz	r3, 8002fb4 <_free_r+0x2c>
 8002fa6:	6063      	str	r3, [r4, #4]
 8002fa8:	6014      	str	r4, [r2, #0]
 8002faa:	4628      	mov	r0, r5
 8002fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb0:	f001 b832 	b.w	8004018 <__malloc_unlock>
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d908      	bls.n	8002fca <_free_r+0x42>
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	1821      	adds	r1, r4, r0
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	bf01      	itttt	eq
 8002fc0:	6819      	ldreq	r1, [r3, #0]
 8002fc2:	685b      	ldreq	r3, [r3, #4]
 8002fc4:	1809      	addeq	r1, r1, r0
 8002fc6:	6021      	streq	r1, [r4, #0]
 8002fc8:	e7ed      	b.n	8002fa6 <_free_r+0x1e>
 8002fca:	461a      	mov	r2, r3
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	b10b      	cbz	r3, 8002fd4 <_free_r+0x4c>
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	d9fa      	bls.n	8002fca <_free_r+0x42>
 8002fd4:	6811      	ldr	r1, [r2, #0]
 8002fd6:	1850      	adds	r0, r2, r1
 8002fd8:	42a0      	cmp	r0, r4
 8002fda:	d10b      	bne.n	8002ff4 <_free_r+0x6c>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	4401      	add	r1, r0
 8002fe0:	1850      	adds	r0, r2, r1
 8002fe2:	4283      	cmp	r3, r0
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	d1e0      	bne.n	8002faa <_free_r+0x22>
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4401      	add	r1, r0
 8002fee:	6011      	str	r1, [r2, #0]
 8002ff0:	6053      	str	r3, [r2, #4]
 8002ff2:	e7da      	b.n	8002faa <_free_r+0x22>
 8002ff4:	d902      	bls.n	8002ffc <_free_r+0x74>
 8002ff6:	230c      	movs	r3, #12
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	e7d6      	b.n	8002faa <_free_r+0x22>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	1821      	adds	r1, r4, r0
 8003000:	428b      	cmp	r3, r1
 8003002:	bf01      	itttt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	1809      	addeq	r1, r1, r0
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	6063      	str	r3, [r4, #4]
 800300e:	6054      	str	r4, [r2, #4]
 8003010:	e7cb      	b.n	8002faa <_free_r+0x22>
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	20000244 	.word	0x20000244

08003018 <sbrk_aligned>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	4e0e      	ldr	r6, [pc, #56]	; (8003054 <sbrk_aligned+0x3c>)
 800301c:	460c      	mov	r4, r1
 800301e:	6831      	ldr	r1, [r6, #0]
 8003020:	4605      	mov	r5, r0
 8003022:	b911      	cbnz	r1, 800302a <sbrk_aligned+0x12>
 8003024:	f000 fcd6 	bl	80039d4 <_sbrk_r>
 8003028:	6030      	str	r0, [r6, #0]
 800302a:	4621      	mov	r1, r4
 800302c:	4628      	mov	r0, r5
 800302e:	f000 fcd1 	bl	80039d4 <_sbrk_r>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	d00a      	beq.n	800304c <sbrk_aligned+0x34>
 8003036:	1cc4      	adds	r4, r0, #3
 8003038:	f024 0403 	bic.w	r4, r4, #3
 800303c:	42a0      	cmp	r0, r4
 800303e:	d007      	beq.n	8003050 <sbrk_aligned+0x38>
 8003040:	1a21      	subs	r1, r4, r0
 8003042:	4628      	mov	r0, r5
 8003044:	f000 fcc6 	bl	80039d4 <_sbrk_r>
 8003048:	3001      	adds	r0, #1
 800304a:	d101      	bne.n	8003050 <sbrk_aligned+0x38>
 800304c:	f04f 34ff 	mov.w	r4, #4294967295
 8003050:	4620      	mov	r0, r4
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	20000248 	.word	0x20000248

08003058 <_malloc_r>:
 8003058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800305c:	1ccd      	adds	r5, r1, #3
 800305e:	f025 0503 	bic.w	r5, r5, #3
 8003062:	3508      	adds	r5, #8
 8003064:	2d0c      	cmp	r5, #12
 8003066:	bf38      	it	cc
 8003068:	250c      	movcc	r5, #12
 800306a:	2d00      	cmp	r5, #0
 800306c:	4607      	mov	r7, r0
 800306e:	db01      	blt.n	8003074 <_malloc_r+0x1c>
 8003070:	42a9      	cmp	r1, r5
 8003072:	d905      	bls.n	8003080 <_malloc_r+0x28>
 8003074:	230c      	movs	r3, #12
 8003076:	2600      	movs	r6, #0
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4630      	mov	r0, r6
 800307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003080:	4e2e      	ldr	r6, [pc, #184]	; (800313c <_malloc_r+0xe4>)
 8003082:	f000 ffc3 	bl	800400c <__malloc_lock>
 8003086:	6833      	ldr	r3, [r6, #0]
 8003088:	461c      	mov	r4, r3
 800308a:	bb34      	cbnz	r4, 80030da <_malloc_r+0x82>
 800308c:	4629      	mov	r1, r5
 800308e:	4638      	mov	r0, r7
 8003090:	f7ff ffc2 	bl	8003018 <sbrk_aligned>
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	4604      	mov	r4, r0
 8003098:	d14d      	bne.n	8003136 <_malloc_r+0xde>
 800309a:	6834      	ldr	r4, [r6, #0]
 800309c:	4626      	mov	r6, r4
 800309e:	2e00      	cmp	r6, #0
 80030a0:	d140      	bne.n	8003124 <_malloc_r+0xcc>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	4631      	mov	r1, r6
 80030a6:	4638      	mov	r0, r7
 80030a8:	eb04 0803 	add.w	r8, r4, r3
 80030ac:	f000 fc92 	bl	80039d4 <_sbrk_r>
 80030b0:	4580      	cmp	r8, r0
 80030b2:	d13a      	bne.n	800312a <_malloc_r+0xd2>
 80030b4:	6821      	ldr	r1, [r4, #0]
 80030b6:	3503      	adds	r5, #3
 80030b8:	1a6d      	subs	r5, r5, r1
 80030ba:	f025 0503 	bic.w	r5, r5, #3
 80030be:	3508      	adds	r5, #8
 80030c0:	2d0c      	cmp	r5, #12
 80030c2:	bf38      	it	cc
 80030c4:	250c      	movcc	r5, #12
 80030c6:	4638      	mov	r0, r7
 80030c8:	4629      	mov	r1, r5
 80030ca:	f7ff ffa5 	bl	8003018 <sbrk_aligned>
 80030ce:	3001      	adds	r0, #1
 80030d0:	d02b      	beq.n	800312a <_malloc_r+0xd2>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	442b      	add	r3, r5
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	e00e      	b.n	80030f8 <_malloc_r+0xa0>
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	1b52      	subs	r2, r2, r5
 80030de:	d41e      	bmi.n	800311e <_malloc_r+0xc6>
 80030e0:	2a0b      	cmp	r2, #11
 80030e2:	d916      	bls.n	8003112 <_malloc_r+0xba>
 80030e4:	1961      	adds	r1, r4, r5
 80030e6:	42a3      	cmp	r3, r4
 80030e8:	6025      	str	r5, [r4, #0]
 80030ea:	bf18      	it	ne
 80030ec:	6059      	strne	r1, [r3, #4]
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	bf08      	it	eq
 80030f2:	6031      	streq	r1, [r6, #0]
 80030f4:	5162      	str	r2, [r4, r5]
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	4638      	mov	r0, r7
 80030fa:	f104 060b 	add.w	r6, r4, #11
 80030fe:	f000 ff8b 	bl	8004018 <__malloc_unlock>
 8003102:	f026 0607 	bic.w	r6, r6, #7
 8003106:	1d23      	adds	r3, r4, #4
 8003108:	1af2      	subs	r2, r6, r3
 800310a:	d0b6      	beq.n	800307a <_malloc_r+0x22>
 800310c:	1b9b      	subs	r3, r3, r6
 800310e:	50a3      	str	r3, [r4, r2]
 8003110:	e7b3      	b.n	800307a <_malloc_r+0x22>
 8003112:	6862      	ldr	r2, [r4, #4]
 8003114:	42a3      	cmp	r3, r4
 8003116:	bf0c      	ite	eq
 8003118:	6032      	streq	r2, [r6, #0]
 800311a:	605a      	strne	r2, [r3, #4]
 800311c:	e7ec      	b.n	80030f8 <_malloc_r+0xa0>
 800311e:	4623      	mov	r3, r4
 8003120:	6864      	ldr	r4, [r4, #4]
 8003122:	e7b2      	b.n	800308a <_malloc_r+0x32>
 8003124:	4634      	mov	r4, r6
 8003126:	6876      	ldr	r6, [r6, #4]
 8003128:	e7b9      	b.n	800309e <_malloc_r+0x46>
 800312a:	230c      	movs	r3, #12
 800312c:	4638      	mov	r0, r7
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	f000 ff72 	bl	8004018 <__malloc_unlock>
 8003134:	e7a1      	b.n	800307a <_malloc_r+0x22>
 8003136:	6025      	str	r5, [r4, #0]
 8003138:	e7de      	b.n	80030f8 <_malloc_r+0xa0>
 800313a:	bf00      	nop
 800313c:	20000244 	.word	0x20000244

08003140 <__ssputs_r>:
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	688e      	ldr	r6, [r1, #8]
 8003146:	4682      	mov	sl, r0
 8003148:	429e      	cmp	r6, r3
 800314a:	460c      	mov	r4, r1
 800314c:	4690      	mov	r8, r2
 800314e:	461f      	mov	r7, r3
 8003150:	d838      	bhi.n	80031c4 <__ssputs_r+0x84>
 8003152:	898a      	ldrh	r2, [r1, #12]
 8003154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003158:	d032      	beq.n	80031c0 <__ssputs_r+0x80>
 800315a:	6825      	ldr	r5, [r4, #0]
 800315c:	6909      	ldr	r1, [r1, #16]
 800315e:	3301      	adds	r3, #1
 8003160:	eba5 0901 	sub.w	r9, r5, r1
 8003164:	6965      	ldr	r5, [r4, #20]
 8003166:	444b      	add	r3, r9
 8003168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800316c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003170:	106d      	asrs	r5, r5, #1
 8003172:	429d      	cmp	r5, r3
 8003174:	bf38      	it	cc
 8003176:	461d      	movcc	r5, r3
 8003178:	0553      	lsls	r3, r2, #21
 800317a:	d531      	bpl.n	80031e0 <__ssputs_r+0xa0>
 800317c:	4629      	mov	r1, r5
 800317e:	f7ff ff6b 	bl	8003058 <_malloc_r>
 8003182:	4606      	mov	r6, r0
 8003184:	b950      	cbnz	r0, 800319c <__ssputs_r+0x5c>
 8003186:	230c      	movs	r3, #12
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f8ca 3000 	str.w	r3, [sl]
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003196:	81a3      	strh	r3, [r4, #12]
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	464a      	mov	r2, r9
 800319e:	6921      	ldr	r1, [r4, #16]
 80031a0:	f7ff fe18 	bl	8002dd4 <memcpy>
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	6126      	str	r6, [r4, #16]
 80031b2:	444e      	add	r6, r9
 80031b4:	6026      	str	r6, [r4, #0]
 80031b6:	463e      	mov	r6, r7
 80031b8:	6165      	str	r5, [r4, #20]
 80031ba:	eba5 0509 	sub.w	r5, r5, r9
 80031be:	60a5      	str	r5, [r4, #8]
 80031c0:	42be      	cmp	r6, r7
 80031c2:	d900      	bls.n	80031c6 <__ssputs_r+0x86>
 80031c4:	463e      	mov	r6, r7
 80031c6:	4632      	mov	r2, r6
 80031c8:	4641      	mov	r1, r8
 80031ca:	6820      	ldr	r0, [r4, #0]
 80031cc:	f000 ff04 	bl	8003fd8 <memmove>
 80031d0:	68a3      	ldr	r3, [r4, #8]
 80031d2:	2000      	movs	r0, #0
 80031d4:	1b9b      	subs	r3, r3, r6
 80031d6:	60a3      	str	r3, [r4, #8]
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	4433      	add	r3, r6
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	e7db      	b.n	8003198 <__ssputs_r+0x58>
 80031e0:	462a      	mov	r2, r5
 80031e2:	f000 ff1f 	bl	8004024 <_realloc_r>
 80031e6:	4606      	mov	r6, r0
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d1e1      	bne.n	80031b0 <__ssputs_r+0x70>
 80031ec:	4650      	mov	r0, sl
 80031ee:	6921      	ldr	r1, [r4, #16]
 80031f0:	f7ff feca 	bl	8002f88 <_free_r>
 80031f4:	e7c7      	b.n	8003186 <__ssputs_r+0x46>
	...

080031f8 <_svfiprintf_r>:
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	4698      	mov	r8, r3
 80031fe:	898b      	ldrh	r3, [r1, #12]
 8003200:	4607      	mov	r7, r0
 8003202:	061b      	lsls	r3, r3, #24
 8003204:	460d      	mov	r5, r1
 8003206:	4614      	mov	r4, r2
 8003208:	b09d      	sub	sp, #116	; 0x74
 800320a:	d50e      	bpl.n	800322a <_svfiprintf_r+0x32>
 800320c:	690b      	ldr	r3, [r1, #16]
 800320e:	b963      	cbnz	r3, 800322a <_svfiprintf_r+0x32>
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	f7ff ff21 	bl	8003058 <_malloc_r>
 8003216:	6028      	str	r0, [r5, #0]
 8003218:	6128      	str	r0, [r5, #16]
 800321a:	b920      	cbnz	r0, 8003226 <_svfiprintf_r+0x2e>
 800321c:	230c      	movs	r3, #12
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	e0d1      	b.n	80033ca <_svfiprintf_r+0x1d2>
 8003226:	2340      	movs	r3, #64	; 0x40
 8003228:	616b      	str	r3, [r5, #20]
 800322a:	2300      	movs	r3, #0
 800322c:	9309      	str	r3, [sp, #36]	; 0x24
 800322e:	2320      	movs	r3, #32
 8003230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003234:	2330      	movs	r3, #48	; 0x30
 8003236:	f04f 0901 	mov.w	r9, #1
 800323a:	f8cd 800c 	str.w	r8, [sp, #12]
 800323e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033e4 <_svfiprintf_r+0x1ec>
 8003242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003246:	4623      	mov	r3, r4
 8003248:	469a      	mov	sl, r3
 800324a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800324e:	b10a      	cbz	r2, 8003254 <_svfiprintf_r+0x5c>
 8003250:	2a25      	cmp	r2, #37	; 0x25
 8003252:	d1f9      	bne.n	8003248 <_svfiprintf_r+0x50>
 8003254:	ebba 0b04 	subs.w	fp, sl, r4
 8003258:	d00b      	beq.n	8003272 <_svfiprintf_r+0x7a>
 800325a:	465b      	mov	r3, fp
 800325c:	4622      	mov	r2, r4
 800325e:	4629      	mov	r1, r5
 8003260:	4638      	mov	r0, r7
 8003262:	f7ff ff6d 	bl	8003140 <__ssputs_r>
 8003266:	3001      	adds	r0, #1
 8003268:	f000 80aa 	beq.w	80033c0 <_svfiprintf_r+0x1c8>
 800326c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800326e:	445a      	add	r2, fp
 8003270:	9209      	str	r2, [sp, #36]	; 0x24
 8003272:	f89a 3000 	ldrb.w	r3, [sl]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80a2 	beq.w	80033c0 <_svfiprintf_r+0x1c8>
 800327c:	2300      	movs	r3, #0
 800327e:	f04f 32ff 	mov.w	r2, #4294967295
 8003282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003286:	f10a 0a01 	add.w	sl, sl, #1
 800328a:	9304      	str	r3, [sp, #16]
 800328c:	9307      	str	r3, [sp, #28]
 800328e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003292:	931a      	str	r3, [sp, #104]	; 0x68
 8003294:	4654      	mov	r4, sl
 8003296:	2205      	movs	r2, #5
 8003298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800329c:	4851      	ldr	r0, [pc, #324]	; (80033e4 <_svfiprintf_r+0x1ec>)
 800329e:	f000 fe8d 	bl	8003fbc <memchr>
 80032a2:	9a04      	ldr	r2, [sp, #16]
 80032a4:	b9d8      	cbnz	r0, 80032de <_svfiprintf_r+0xe6>
 80032a6:	06d0      	lsls	r0, r2, #27
 80032a8:	bf44      	itt	mi
 80032aa:	2320      	movmi	r3, #32
 80032ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032b0:	0711      	lsls	r1, r2, #28
 80032b2:	bf44      	itt	mi
 80032b4:	232b      	movmi	r3, #43	; 0x2b
 80032b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ba:	f89a 3000 	ldrb.w	r3, [sl]
 80032be:	2b2a      	cmp	r3, #42	; 0x2a
 80032c0:	d015      	beq.n	80032ee <_svfiprintf_r+0xf6>
 80032c2:	4654      	mov	r4, sl
 80032c4:	2000      	movs	r0, #0
 80032c6:	f04f 0c0a 	mov.w	ip, #10
 80032ca:	9a07      	ldr	r2, [sp, #28]
 80032cc:	4621      	mov	r1, r4
 80032ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032d2:	3b30      	subs	r3, #48	; 0x30
 80032d4:	2b09      	cmp	r3, #9
 80032d6:	d94e      	bls.n	8003376 <_svfiprintf_r+0x17e>
 80032d8:	b1b0      	cbz	r0, 8003308 <_svfiprintf_r+0x110>
 80032da:	9207      	str	r2, [sp, #28]
 80032dc:	e014      	b.n	8003308 <_svfiprintf_r+0x110>
 80032de:	eba0 0308 	sub.w	r3, r0, r8
 80032e2:	fa09 f303 	lsl.w	r3, r9, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	46a2      	mov	sl, r4
 80032ea:	9304      	str	r3, [sp, #16]
 80032ec:	e7d2      	b.n	8003294 <_svfiprintf_r+0x9c>
 80032ee:	9b03      	ldr	r3, [sp, #12]
 80032f0:	1d19      	adds	r1, r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	9103      	str	r1, [sp, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bfbb      	ittet	lt
 80032fa:	425b      	neglt	r3, r3
 80032fc:	f042 0202 	orrlt.w	r2, r2, #2
 8003300:	9307      	strge	r3, [sp, #28]
 8003302:	9307      	strlt	r3, [sp, #28]
 8003304:	bfb8      	it	lt
 8003306:	9204      	strlt	r2, [sp, #16]
 8003308:	7823      	ldrb	r3, [r4, #0]
 800330a:	2b2e      	cmp	r3, #46	; 0x2e
 800330c:	d10c      	bne.n	8003328 <_svfiprintf_r+0x130>
 800330e:	7863      	ldrb	r3, [r4, #1]
 8003310:	2b2a      	cmp	r3, #42	; 0x2a
 8003312:	d135      	bne.n	8003380 <_svfiprintf_r+0x188>
 8003314:	9b03      	ldr	r3, [sp, #12]
 8003316:	3402      	adds	r4, #2
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9203      	str	r2, [sp, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfb8      	it	lt
 8003322:	f04f 33ff 	movlt.w	r3, #4294967295
 8003326:	9305      	str	r3, [sp, #20]
 8003328:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80033e8 <_svfiprintf_r+0x1f0>
 800332c:	2203      	movs	r2, #3
 800332e:	4650      	mov	r0, sl
 8003330:	7821      	ldrb	r1, [r4, #0]
 8003332:	f000 fe43 	bl	8003fbc <memchr>
 8003336:	b140      	cbz	r0, 800334a <_svfiprintf_r+0x152>
 8003338:	2340      	movs	r3, #64	; 0x40
 800333a:	eba0 000a 	sub.w	r0, r0, sl
 800333e:	fa03 f000 	lsl.w	r0, r3, r0
 8003342:	9b04      	ldr	r3, [sp, #16]
 8003344:	3401      	adds	r4, #1
 8003346:	4303      	orrs	r3, r0
 8003348:	9304      	str	r3, [sp, #16]
 800334a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800334e:	2206      	movs	r2, #6
 8003350:	4826      	ldr	r0, [pc, #152]	; (80033ec <_svfiprintf_r+0x1f4>)
 8003352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003356:	f000 fe31 	bl	8003fbc <memchr>
 800335a:	2800      	cmp	r0, #0
 800335c:	d038      	beq.n	80033d0 <_svfiprintf_r+0x1d8>
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <_svfiprintf_r+0x1f8>)
 8003360:	bb1b      	cbnz	r3, 80033aa <_svfiprintf_r+0x1b2>
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	3307      	adds	r3, #7
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	3308      	adds	r3, #8
 800336c:	9303      	str	r3, [sp, #12]
 800336e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003370:	4433      	add	r3, r6
 8003372:	9309      	str	r3, [sp, #36]	; 0x24
 8003374:	e767      	b.n	8003246 <_svfiprintf_r+0x4e>
 8003376:	460c      	mov	r4, r1
 8003378:	2001      	movs	r0, #1
 800337a:	fb0c 3202 	mla	r2, ip, r2, r3
 800337e:	e7a5      	b.n	80032cc <_svfiprintf_r+0xd4>
 8003380:	2300      	movs	r3, #0
 8003382:	f04f 0c0a 	mov.w	ip, #10
 8003386:	4619      	mov	r1, r3
 8003388:	3401      	adds	r4, #1
 800338a:	9305      	str	r3, [sp, #20]
 800338c:	4620      	mov	r0, r4
 800338e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003392:	3a30      	subs	r2, #48	; 0x30
 8003394:	2a09      	cmp	r2, #9
 8003396:	d903      	bls.n	80033a0 <_svfiprintf_r+0x1a8>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0c5      	beq.n	8003328 <_svfiprintf_r+0x130>
 800339c:	9105      	str	r1, [sp, #20]
 800339e:	e7c3      	b.n	8003328 <_svfiprintf_r+0x130>
 80033a0:	4604      	mov	r4, r0
 80033a2:	2301      	movs	r3, #1
 80033a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80033a8:	e7f0      	b.n	800338c <_svfiprintf_r+0x194>
 80033aa:	ab03      	add	r3, sp, #12
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	462a      	mov	r2, r5
 80033b0:	4638      	mov	r0, r7
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <_svfiprintf_r+0x1fc>)
 80033b4:	a904      	add	r1, sp, #16
 80033b6:	f3af 8000 	nop.w
 80033ba:	1c42      	adds	r2, r0, #1
 80033bc:	4606      	mov	r6, r0
 80033be:	d1d6      	bne.n	800336e <_svfiprintf_r+0x176>
 80033c0:	89ab      	ldrh	r3, [r5, #12]
 80033c2:	065b      	lsls	r3, r3, #25
 80033c4:	f53f af2c 	bmi.w	8003220 <_svfiprintf_r+0x28>
 80033c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ca:	b01d      	add	sp, #116	; 0x74
 80033cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d0:	ab03      	add	r3, sp, #12
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	462a      	mov	r2, r5
 80033d6:	4638      	mov	r0, r7
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <_svfiprintf_r+0x1fc>)
 80033da:	a904      	add	r1, sp, #16
 80033dc:	f000 f9d4 	bl	8003788 <_printf_i>
 80033e0:	e7eb      	b.n	80033ba <_svfiprintf_r+0x1c2>
 80033e2:	bf00      	nop
 80033e4:	0800441e 	.word	0x0800441e
 80033e8:	08004424 	.word	0x08004424
 80033ec:	08004428 	.word	0x08004428
 80033f0:	00000000 	.word	0x00000000
 80033f4:	08003141 	.word	0x08003141

080033f8 <__sfputc_r>:
 80033f8:	6893      	ldr	r3, [r2, #8]
 80033fa:	b410      	push	{r4}
 80033fc:	3b01      	subs	r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	6093      	str	r3, [r2, #8]
 8003402:	da07      	bge.n	8003414 <__sfputc_r+0x1c>
 8003404:	6994      	ldr	r4, [r2, #24]
 8003406:	42a3      	cmp	r3, r4
 8003408:	db01      	blt.n	800340e <__sfputc_r+0x16>
 800340a:	290a      	cmp	r1, #10
 800340c:	d102      	bne.n	8003414 <__sfputc_r+0x1c>
 800340e:	bc10      	pop	{r4}
 8003410:	f000 baf0 	b.w	80039f4 <__swbuf_r>
 8003414:	6813      	ldr	r3, [r2, #0]
 8003416:	1c58      	adds	r0, r3, #1
 8003418:	6010      	str	r0, [r2, #0]
 800341a:	7019      	strb	r1, [r3, #0]
 800341c:	4608      	mov	r0, r1
 800341e:	bc10      	pop	{r4}
 8003420:	4770      	bx	lr

08003422 <__sfputs_r>:
 8003422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003424:	4606      	mov	r6, r0
 8003426:	460f      	mov	r7, r1
 8003428:	4614      	mov	r4, r2
 800342a:	18d5      	adds	r5, r2, r3
 800342c:	42ac      	cmp	r4, r5
 800342e:	d101      	bne.n	8003434 <__sfputs_r+0x12>
 8003430:	2000      	movs	r0, #0
 8003432:	e007      	b.n	8003444 <__sfputs_r+0x22>
 8003434:	463a      	mov	r2, r7
 8003436:	4630      	mov	r0, r6
 8003438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800343c:	f7ff ffdc 	bl	80033f8 <__sfputc_r>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d1f3      	bne.n	800342c <__sfputs_r+0xa>
 8003444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003448 <_vfiprintf_r>:
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	460d      	mov	r5, r1
 800344e:	4614      	mov	r4, r2
 8003450:	4698      	mov	r8, r3
 8003452:	4606      	mov	r6, r0
 8003454:	b09d      	sub	sp, #116	; 0x74
 8003456:	b118      	cbz	r0, 8003460 <_vfiprintf_r+0x18>
 8003458:	6983      	ldr	r3, [r0, #24]
 800345a:	b90b      	cbnz	r3, 8003460 <_vfiprintf_r+0x18>
 800345c:	f000 fca8 	bl	8003db0 <__sinit>
 8003460:	4b89      	ldr	r3, [pc, #548]	; (8003688 <_vfiprintf_r+0x240>)
 8003462:	429d      	cmp	r5, r3
 8003464:	d11b      	bne.n	800349e <_vfiprintf_r+0x56>
 8003466:	6875      	ldr	r5, [r6, #4]
 8003468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800346a:	07d9      	lsls	r1, r3, #31
 800346c:	d405      	bmi.n	800347a <_vfiprintf_r+0x32>
 800346e:	89ab      	ldrh	r3, [r5, #12]
 8003470:	059a      	lsls	r2, r3, #22
 8003472:	d402      	bmi.n	800347a <_vfiprintf_r+0x32>
 8003474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003476:	f000 fd39 	bl	8003eec <__retarget_lock_acquire_recursive>
 800347a:	89ab      	ldrh	r3, [r5, #12]
 800347c:	071b      	lsls	r3, r3, #28
 800347e:	d501      	bpl.n	8003484 <_vfiprintf_r+0x3c>
 8003480:	692b      	ldr	r3, [r5, #16]
 8003482:	b9eb      	cbnz	r3, 80034c0 <_vfiprintf_r+0x78>
 8003484:	4629      	mov	r1, r5
 8003486:	4630      	mov	r0, r6
 8003488:	f000 fb06 	bl	8003a98 <__swsetup_r>
 800348c:	b1c0      	cbz	r0, 80034c0 <_vfiprintf_r+0x78>
 800348e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003490:	07dc      	lsls	r4, r3, #31
 8003492:	d50e      	bpl.n	80034b2 <_vfiprintf_r+0x6a>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	b01d      	add	sp, #116	; 0x74
 800349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349e:	4b7b      	ldr	r3, [pc, #492]	; (800368c <_vfiprintf_r+0x244>)
 80034a0:	429d      	cmp	r5, r3
 80034a2:	d101      	bne.n	80034a8 <_vfiprintf_r+0x60>
 80034a4:	68b5      	ldr	r5, [r6, #8]
 80034a6:	e7df      	b.n	8003468 <_vfiprintf_r+0x20>
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <_vfiprintf_r+0x248>)
 80034aa:	429d      	cmp	r5, r3
 80034ac:	bf08      	it	eq
 80034ae:	68f5      	ldreq	r5, [r6, #12]
 80034b0:	e7da      	b.n	8003468 <_vfiprintf_r+0x20>
 80034b2:	89ab      	ldrh	r3, [r5, #12]
 80034b4:	0598      	lsls	r0, r3, #22
 80034b6:	d4ed      	bmi.n	8003494 <_vfiprintf_r+0x4c>
 80034b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ba:	f000 fd18 	bl	8003eee <__retarget_lock_release_recursive>
 80034be:	e7e9      	b.n	8003494 <_vfiprintf_r+0x4c>
 80034c0:	2300      	movs	r3, #0
 80034c2:	9309      	str	r3, [sp, #36]	; 0x24
 80034c4:	2320      	movs	r3, #32
 80034c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034ca:	2330      	movs	r3, #48	; 0x30
 80034cc:	f04f 0901 	mov.w	r9, #1
 80034d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003694 <_vfiprintf_r+0x24c>
 80034d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034dc:	4623      	mov	r3, r4
 80034de:	469a      	mov	sl, r3
 80034e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e4:	b10a      	cbz	r2, 80034ea <_vfiprintf_r+0xa2>
 80034e6:	2a25      	cmp	r2, #37	; 0x25
 80034e8:	d1f9      	bne.n	80034de <_vfiprintf_r+0x96>
 80034ea:	ebba 0b04 	subs.w	fp, sl, r4
 80034ee:	d00b      	beq.n	8003508 <_vfiprintf_r+0xc0>
 80034f0:	465b      	mov	r3, fp
 80034f2:	4622      	mov	r2, r4
 80034f4:	4629      	mov	r1, r5
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7ff ff93 	bl	8003422 <__sfputs_r>
 80034fc:	3001      	adds	r0, #1
 80034fe:	f000 80aa 	beq.w	8003656 <_vfiprintf_r+0x20e>
 8003502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003504:	445a      	add	r2, fp
 8003506:	9209      	str	r2, [sp, #36]	; 0x24
 8003508:	f89a 3000 	ldrb.w	r3, [sl]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a2 	beq.w	8003656 <_vfiprintf_r+0x20e>
 8003512:	2300      	movs	r3, #0
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351c:	f10a 0a01 	add.w	sl, sl, #1
 8003520:	9304      	str	r3, [sp, #16]
 8003522:	9307      	str	r3, [sp, #28]
 8003524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003528:	931a      	str	r3, [sp, #104]	; 0x68
 800352a:	4654      	mov	r4, sl
 800352c:	2205      	movs	r2, #5
 800352e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003532:	4858      	ldr	r0, [pc, #352]	; (8003694 <_vfiprintf_r+0x24c>)
 8003534:	f000 fd42 	bl	8003fbc <memchr>
 8003538:	9a04      	ldr	r2, [sp, #16]
 800353a:	b9d8      	cbnz	r0, 8003574 <_vfiprintf_r+0x12c>
 800353c:	06d1      	lsls	r1, r2, #27
 800353e:	bf44      	itt	mi
 8003540:	2320      	movmi	r3, #32
 8003542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003546:	0713      	lsls	r3, r2, #28
 8003548:	bf44      	itt	mi
 800354a:	232b      	movmi	r3, #43	; 0x2b
 800354c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003550:	f89a 3000 	ldrb.w	r3, [sl]
 8003554:	2b2a      	cmp	r3, #42	; 0x2a
 8003556:	d015      	beq.n	8003584 <_vfiprintf_r+0x13c>
 8003558:	4654      	mov	r4, sl
 800355a:	2000      	movs	r0, #0
 800355c:	f04f 0c0a 	mov.w	ip, #10
 8003560:	9a07      	ldr	r2, [sp, #28]
 8003562:	4621      	mov	r1, r4
 8003564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003568:	3b30      	subs	r3, #48	; 0x30
 800356a:	2b09      	cmp	r3, #9
 800356c:	d94e      	bls.n	800360c <_vfiprintf_r+0x1c4>
 800356e:	b1b0      	cbz	r0, 800359e <_vfiprintf_r+0x156>
 8003570:	9207      	str	r2, [sp, #28]
 8003572:	e014      	b.n	800359e <_vfiprintf_r+0x156>
 8003574:	eba0 0308 	sub.w	r3, r0, r8
 8003578:	fa09 f303 	lsl.w	r3, r9, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	46a2      	mov	sl, r4
 8003580:	9304      	str	r3, [sp, #16]
 8003582:	e7d2      	b.n	800352a <_vfiprintf_r+0xe2>
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	1d19      	adds	r1, r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	9103      	str	r1, [sp, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfbb      	ittet	lt
 8003590:	425b      	neglt	r3, r3
 8003592:	f042 0202 	orrlt.w	r2, r2, #2
 8003596:	9307      	strge	r3, [sp, #28]
 8003598:	9307      	strlt	r3, [sp, #28]
 800359a:	bfb8      	it	lt
 800359c:	9204      	strlt	r2, [sp, #16]
 800359e:	7823      	ldrb	r3, [r4, #0]
 80035a0:	2b2e      	cmp	r3, #46	; 0x2e
 80035a2:	d10c      	bne.n	80035be <_vfiprintf_r+0x176>
 80035a4:	7863      	ldrb	r3, [r4, #1]
 80035a6:	2b2a      	cmp	r3, #42	; 0x2a
 80035a8:	d135      	bne.n	8003616 <_vfiprintf_r+0x1ce>
 80035aa:	9b03      	ldr	r3, [sp, #12]
 80035ac:	3402      	adds	r4, #2
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	9203      	str	r2, [sp, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bfb8      	it	lt
 80035b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80035bc:	9305      	str	r3, [sp, #20]
 80035be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003698 <_vfiprintf_r+0x250>
 80035c2:	2203      	movs	r2, #3
 80035c4:	4650      	mov	r0, sl
 80035c6:	7821      	ldrb	r1, [r4, #0]
 80035c8:	f000 fcf8 	bl	8003fbc <memchr>
 80035cc:	b140      	cbz	r0, 80035e0 <_vfiprintf_r+0x198>
 80035ce:	2340      	movs	r3, #64	; 0x40
 80035d0:	eba0 000a 	sub.w	r0, r0, sl
 80035d4:	fa03 f000 	lsl.w	r0, r3, r0
 80035d8:	9b04      	ldr	r3, [sp, #16]
 80035da:	3401      	adds	r4, #1
 80035dc:	4303      	orrs	r3, r0
 80035de:	9304      	str	r3, [sp, #16]
 80035e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e4:	2206      	movs	r2, #6
 80035e6:	482d      	ldr	r0, [pc, #180]	; (800369c <_vfiprintf_r+0x254>)
 80035e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ec:	f000 fce6 	bl	8003fbc <memchr>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d03f      	beq.n	8003674 <_vfiprintf_r+0x22c>
 80035f4:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <_vfiprintf_r+0x258>)
 80035f6:	bb1b      	cbnz	r3, 8003640 <_vfiprintf_r+0x1f8>
 80035f8:	9b03      	ldr	r3, [sp, #12]
 80035fa:	3307      	adds	r3, #7
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	3308      	adds	r3, #8
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003606:	443b      	add	r3, r7
 8003608:	9309      	str	r3, [sp, #36]	; 0x24
 800360a:	e767      	b.n	80034dc <_vfiprintf_r+0x94>
 800360c:	460c      	mov	r4, r1
 800360e:	2001      	movs	r0, #1
 8003610:	fb0c 3202 	mla	r2, ip, r2, r3
 8003614:	e7a5      	b.n	8003562 <_vfiprintf_r+0x11a>
 8003616:	2300      	movs	r3, #0
 8003618:	f04f 0c0a 	mov.w	ip, #10
 800361c:	4619      	mov	r1, r3
 800361e:	3401      	adds	r4, #1
 8003620:	9305      	str	r3, [sp, #20]
 8003622:	4620      	mov	r0, r4
 8003624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003628:	3a30      	subs	r2, #48	; 0x30
 800362a:	2a09      	cmp	r2, #9
 800362c:	d903      	bls.n	8003636 <_vfiprintf_r+0x1ee>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0c5      	beq.n	80035be <_vfiprintf_r+0x176>
 8003632:	9105      	str	r1, [sp, #20]
 8003634:	e7c3      	b.n	80035be <_vfiprintf_r+0x176>
 8003636:	4604      	mov	r4, r0
 8003638:	2301      	movs	r3, #1
 800363a:	fb0c 2101 	mla	r1, ip, r1, r2
 800363e:	e7f0      	b.n	8003622 <_vfiprintf_r+0x1da>
 8003640:	ab03      	add	r3, sp, #12
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	462a      	mov	r2, r5
 8003646:	4630      	mov	r0, r6
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <_vfiprintf_r+0x25c>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	f3af 8000 	nop.w
 8003650:	4607      	mov	r7, r0
 8003652:	1c78      	adds	r0, r7, #1
 8003654:	d1d6      	bne.n	8003604 <_vfiprintf_r+0x1bc>
 8003656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003658:	07d9      	lsls	r1, r3, #31
 800365a:	d405      	bmi.n	8003668 <_vfiprintf_r+0x220>
 800365c:	89ab      	ldrh	r3, [r5, #12]
 800365e:	059a      	lsls	r2, r3, #22
 8003660:	d402      	bmi.n	8003668 <_vfiprintf_r+0x220>
 8003662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003664:	f000 fc43 	bl	8003eee <__retarget_lock_release_recursive>
 8003668:	89ab      	ldrh	r3, [r5, #12]
 800366a:	065b      	lsls	r3, r3, #25
 800366c:	f53f af12 	bmi.w	8003494 <_vfiprintf_r+0x4c>
 8003670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003672:	e711      	b.n	8003498 <_vfiprintf_r+0x50>
 8003674:	ab03      	add	r3, sp, #12
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	462a      	mov	r2, r5
 800367a:	4630      	mov	r0, r6
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <_vfiprintf_r+0x25c>)
 800367e:	a904      	add	r1, sp, #16
 8003680:	f000 f882 	bl	8003788 <_printf_i>
 8003684:	e7e4      	b.n	8003650 <_vfiprintf_r+0x208>
 8003686:	bf00      	nop
 8003688:	08004474 	.word	0x08004474
 800368c:	08004494 	.word	0x08004494
 8003690:	08004454 	.word	0x08004454
 8003694:	0800441e 	.word	0x0800441e
 8003698:	08004424 	.word	0x08004424
 800369c:	08004428 	.word	0x08004428
 80036a0:	00000000 	.word	0x00000000
 80036a4:	08003423 	.word	0x08003423

080036a8 <_printf_common>:
 80036a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ac:	4616      	mov	r6, r2
 80036ae:	4699      	mov	r9, r3
 80036b0:	688a      	ldr	r2, [r1, #8]
 80036b2:	690b      	ldr	r3, [r1, #16]
 80036b4:	4607      	mov	r7, r0
 80036b6:	4293      	cmp	r3, r2
 80036b8:	bfb8      	it	lt
 80036ba:	4613      	movlt	r3, r2
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036c2:	460c      	mov	r4, r1
 80036c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c8:	b10a      	cbz	r2, 80036ce <_printf_common+0x26>
 80036ca:	3301      	adds	r3, #1
 80036cc:	6033      	str	r3, [r6, #0]
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	0699      	lsls	r1, r3, #26
 80036d2:	bf42      	ittt	mi
 80036d4:	6833      	ldrmi	r3, [r6, #0]
 80036d6:	3302      	addmi	r3, #2
 80036d8:	6033      	strmi	r3, [r6, #0]
 80036da:	6825      	ldr	r5, [r4, #0]
 80036dc:	f015 0506 	ands.w	r5, r5, #6
 80036e0:	d106      	bne.n	80036f0 <_printf_common+0x48>
 80036e2:	f104 0a19 	add.w	sl, r4, #25
 80036e6:	68e3      	ldr	r3, [r4, #12]
 80036e8:	6832      	ldr	r2, [r6, #0]
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	42ab      	cmp	r3, r5
 80036ee:	dc28      	bgt.n	8003742 <_printf_common+0x9a>
 80036f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036f4:	1e13      	subs	r3, r2, #0
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	bf18      	it	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	0692      	lsls	r2, r2, #26
 80036fe:	d42d      	bmi.n	800375c <_printf_common+0xb4>
 8003700:	4649      	mov	r1, r9
 8003702:	4638      	mov	r0, r7
 8003704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003708:	47c0      	blx	r8
 800370a:	3001      	adds	r0, #1
 800370c:	d020      	beq.n	8003750 <_printf_common+0xa8>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	68e5      	ldr	r5, [r4, #12]
 8003712:	f003 0306 	and.w	r3, r3, #6
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf18      	it	ne
 800371a:	2500      	movne	r5, #0
 800371c:	6832      	ldr	r2, [r6, #0]
 800371e:	f04f 0600 	mov.w	r6, #0
 8003722:	68a3      	ldr	r3, [r4, #8]
 8003724:	bf08      	it	eq
 8003726:	1aad      	subeq	r5, r5, r2
 8003728:	6922      	ldr	r2, [r4, #16]
 800372a:	bf08      	it	eq
 800372c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003730:	4293      	cmp	r3, r2
 8003732:	bfc4      	itt	gt
 8003734:	1a9b      	subgt	r3, r3, r2
 8003736:	18ed      	addgt	r5, r5, r3
 8003738:	341a      	adds	r4, #26
 800373a:	42b5      	cmp	r5, r6
 800373c:	d11a      	bne.n	8003774 <_printf_common+0xcc>
 800373e:	2000      	movs	r0, #0
 8003740:	e008      	b.n	8003754 <_printf_common+0xac>
 8003742:	2301      	movs	r3, #1
 8003744:	4652      	mov	r2, sl
 8003746:	4649      	mov	r1, r9
 8003748:	4638      	mov	r0, r7
 800374a:	47c0      	blx	r8
 800374c:	3001      	adds	r0, #1
 800374e:	d103      	bne.n	8003758 <_printf_common+0xb0>
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003758:	3501      	adds	r5, #1
 800375a:	e7c4      	b.n	80036e6 <_printf_common+0x3e>
 800375c:	2030      	movs	r0, #48	; 0x30
 800375e:	18e1      	adds	r1, r4, r3
 8003760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800376a:	4422      	add	r2, r4
 800376c:	3302      	adds	r3, #2
 800376e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003772:	e7c5      	b.n	8003700 <_printf_common+0x58>
 8003774:	2301      	movs	r3, #1
 8003776:	4622      	mov	r2, r4
 8003778:	4649      	mov	r1, r9
 800377a:	4638      	mov	r0, r7
 800377c:	47c0      	blx	r8
 800377e:	3001      	adds	r0, #1
 8003780:	d0e6      	beq.n	8003750 <_printf_common+0xa8>
 8003782:	3601      	adds	r6, #1
 8003784:	e7d9      	b.n	800373a <_printf_common+0x92>
	...

08003788 <_printf_i>:
 8003788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800378c:	7e0f      	ldrb	r7, [r1, #24]
 800378e:	4691      	mov	r9, r2
 8003790:	2f78      	cmp	r7, #120	; 0x78
 8003792:	4680      	mov	r8, r0
 8003794:	460c      	mov	r4, r1
 8003796:	469a      	mov	sl, r3
 8003798:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800379a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800379e:	d807      	bhi.n	80037b0 <_printf_i+0x28>
 80037a0:	2f62      	cmp	r7, #98	; 0x62
 80037a2:	d80a      	bhi.n	80037ba <_printf_i+0x32>
 80037a4:	2f00      	cmp	r7, #0
 80037a6:	f000 80d9 	beq.w	800395c <_printf_i+0x1d4>
 80037aa:	2f58      	cmp	r7, #88	; 0x58
 80037ac:	f000 80a4 	beq.w	80038f8 <_printf_i+0x170>
 80037b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037b8:	e03a      	b.n	8003830 <_printf_i+0xa8>
 80037ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037be:	2b15      	cmp	r3, #21
 80037c0:	d8f6      	bhi.n	80037b0 <_printf_i+0x28>
 80037c2:	a101      	add	r1, pc, #4	; (adr r1, 80037c8 <_printf_i+0x40>)
 80037c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037c8:	08003821 	.word	0x08003821
 80037cc:	08003835 	.word	0x08003835
 80037d0:	080037b1 	.word	0x080037b1
 80037d4:	080037b1 	.word	0x080037b1
 80037d8:	080037b1 	.word	0x080037b1
 80037dc:	080037b1 	.word	0x080037b1
 80037e0:	08003835 	.word	0x08003835
 80037e4:	080037b1 	.word	0x080037b1
 80037e8:	080037b1 	.word	0x080037b1
 80037ec:	080037b1 	.word	0x080037b1
 80037f0:	080037b1 	.word	0x080037b1
 80037f4:	08003943 	.word	0x08003943
 80037f8:	08003865 	.word	0x08003865
 80037fc:	08003925 	.word	0x08003925
 8003800:	080037b1 	.word	0x080037b1
 8003804:	080037b1 	.word	0x080037b1
 8003808:	08003965 	.word	0x08003965
 800380c:	080037b1 	.word	0x080037b1
 8003810:	08003865 	.word	0x08003865
 8003814:	080037b1 	.word	0x080037b1
 8003818:	080037b1 	.word	0x080037b1
 800381c:	0800392d 	.word	0x0800392d
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	1d1a      	adds	r2, r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	602a      	str	r2, [r5, #0]
 8003828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003830:	2301      	movs	r3, #1
 8003832:	e0a4      	b.n	800397e <_printf_i+0x1f6>
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	6829      	ldr	r1, [r5, #0]
 8003838:	0606      	lsls	r6, r0, #24
 800383a:	f101 0304 	add.w	r3, r1, #4
 800383e:	d50a      	bpl.n	8003856 <_printf_i+0xce>
 8003840:	680e      	ldr	r6, [r1, #0]
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	2e00      	cmp	r6, #0
 8003846:	da03      	bge.n	8003850 <_printf_i+0xc8>
 8003848:	232d      	movs	r3, #45	; 0x2d
 800384a:	4276      	negs	r6, r6
 800384c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003850:	230a      	movs	r3, #10
 8003852:	485e      	ldr	r0, [pc, #376]	; (80039cc <_printf_i+0x244>)
 8003854:	e019      	b.n	800388a <_printf_i+0x102>
 8003856:	680e      	ldr	r6, [r1, #0]
 8003858:	f010 0f40 	tst.w	r0, #64	; 0x40
 800385c:	602b      	str	r3, [r5, #0]
 800385e:	bf18      	it	ne
 8003860:	b236      	sxthne	r6, r6
 8003862:	e7ef      	b.n	8003844 <_printf_i+0xbc>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	1d19      	adds	r1, r3, #4
 800386a:	6029      	str	r1, [r5, #0]
 800386c:	0601      	lsls	r1, r0, #24
 800386e:	d501      	bpl.n	8003874 <_printf_i+0xec>
 8003870:	681e      	ldr	r6, [r3, #0]
 8003872:	e002      	b.n	800387a <_printf_i+0xf2>
 8003874:	0646      	lsls	r6, r0, #25
 8003876:	d5fb      	bpl.n	8003870 <_printf_i+0xe8>
 8003878:	881e      	ldrh	r6, [r3, #0]
 800387a:	2f6f      	cmp	r7, #111	; 0x6f
 800387c:	bf0c      	ite	eq
 800387e:	2308      	moveq	r3, #8
 8003880:	230a      	movne	r3, #10
 8003882:	4852      	ldr	r0, [pc, #328]	; (80039cc <_printf_i+0x244>)
 8003884:	2100      	movs	r1, #0
 8003886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800388a:	6865      	ldr	r5, [r4, #4]
 800388c:	2d00      	cmp	r5, #0
 800388e:	bfa8      	it	ge
 8003890:	6821      	ldrge	r1, [r4, #0]
 8003892:	60a5      	str	r5, [r4, #8]
 8003894:	bfa4      	itt	ge
 8003896:	f021 0104 	bicge.w	r1, r1, #4
 800389a:	6021      	strge	r1, [r4, #0]
 800389c:	b90e      	cbnz	r6, 80038a2 <_printf_i+0x11a>
 800389e:	2d00      	cmp	r5, #0
 80038a0:	d04d      	beq.n	800393e <_printf_i+0x1b6>
 80038a2:	4615      	mov	r5, r2
 80038a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80038a8:	fb03 6711 	mls	r7, r3, r1, r6
 80038ac:	5dc7      	ldrb	r7, [r0, r7]
 80038ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038b2:	4637      	mov	r7, r6
 80038b4:	42bb      	cmp	r3, r7
 80038b6:	460e      	mov	r6, r1
 80038b8:	d9f4      	bls.n	80038a4 <_printf_i+0x11c>
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d10b      	bne.n	80038d6 <_printf_i+0x14e>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	07de      	lsls	r6, r3, #31
 80038c2:	d508      	bpl.n	80038d6 <_printf_i+0x14e>
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	6861      	ldr	r1, [r4, #4]
 80038c8:	4299      	cmp	r1, r3
 80038ca:	bfde      	ittt	le
 80038cc:	2330      	movle	r3, #48	; 0x30
 80038ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038d6:	1b52      	subs	r2, r2, r5
 80038d8:	6122      	str	r2, [r4, #16]
 80038da:	464b      	mov	r3, r9
 80038dc:	4621      	mov	r1, r4
 80038de:	4640      	mov	r0, r8
 80038e0:	f8cd a000 	str.w	sl, [sp]
 80038e4:	aa03      	add	r2, sp, #12
 80038e6:	f7ff fedf 	bl	80036a8 <_printf_common>
 80038ea:	3001      	adds	r0, #1
 80038ec:	d14c      	bne.n	8003988 <_printf_i+0x200>
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	b004      	add	sp, #16
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f8:	4834      	ldr	r0, [pc, #208]	; (80039cc <_printf_i+0x244>)
 80038fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038fe:	6829      	ldr	r1, [r5, #0]
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f851 6b04 	ldr.w	r6, [r1], #4
 8003906:	6029      	str	r1, [r5, #0]
 8003908:	061d      	lsls	r5, r3, #24
 800390a:	d514      	bpl.n	8003936 <_printf_i+0x1ae>
 800390c:	07df      	lsls	r7, r3, #31
 800390e:	bf44      	itt	mi
 8003910:	f043 0320 	orrmi.w	r3, r3, #32
 8003914:	6023      	strmi	r3, [r4, #0]
 8003916:	b91e      	cbnz	r6, 8003920 <_printf_i+0x198>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f023 0320 	bic.w	r3, r3, #32
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	2310      	movs	r3, #16
 8003922:	e7af      	b.n	8003884 <_printf_i+0xfc>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f043 0320 	orr.w	r3, r3, #32
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	2378      	movs	r3, #120	; 0x78
 800392e:	4828      	ldr	r0, [pc, #160]	; (80039d0 <_printf_i+0x248>)
 8003930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003934:	e7e3      	b.n	80038fe <_printf_i+0x176>
 8003936:	0659      	lsls	r1, r3, #25
 8003938:	bf48      	it	mi
 800393a:	b2b6      	uxthmi	r6, r6
 800393c:	e7e6      	b.n	800390c <_printf_i+0x184>
 800393e:	4615      	mov	r5, r2
 8003940:	e7bb      	b.n	80038ba <_printf_i+0x132>
 8003942:	682b      	ldr	r3, [r5, #0]
 8003944:	6826      	ldr	r6, [r4, #0]
 8003946:	1d18      	adds	r0, r3, #4
 8003948:	6961      	ldr	r1, [r4, #20]
 800394a:	6028      	str	r0, [r5, #0]
 800394c:	0635      	lsls	r5, r6, #24
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	d501      	bpl.n	8003956 <_printf_i+0x1ce>
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	e002      	b.n	800395c <_printf_i+0x1d4>
 8003956:	0670      	lsls	r0, r6, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0x1ca>
 800395a:	8019      	strh	r1, [r3, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	4615      	mov	r5, r2
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	e7ba      	b.n	80038da <_printf_i+0x152>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	2100      	movs	r1, #0
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	602a      	str	r2, [r5, #0]
 800396c:	681d      	ldr	r5, [r3, #0]
 800396e:	6862      	ldr	r2, [r4, #4]
 8003970:	4628      	mov	r0, r5
 8003972:	f000 fb23 	bl	8003fbc <memchr>
 8003976:	b108      	cbz	r0, 800397c <_printf_i+0x1f4>
 8003978:	1b40      	subs	r0, r0, r5
 800397a:	6060      	str	r0, [r4, #4]
 800397c:	6863      	ldr	r3, [r4, #4]
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	2300      	movs	r3, #0
 8003982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003986:	e7a8      	b.n	80038da <_printf_i+0x152>
 8003988:	462a      	mov	r2, r5
 800398a:	4649      	mov	r1, r9
 800398c:	4640      	mov	r0, r8
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	47d0      	blx	sl
 8003992:	3001      	adds	r0, #1
 8003994:	d0ab      	beq.n	80038ee <_printf_i+0x166>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	079b      	lsls	r3, r3, #30
 800399a:	d413      	bmi.n	80039c4 <_printf_i+0x23c>
 800399c:	68e0      	ldr	r0, [r4, #12]
 800399e:	9b03      	ldr	r3, [sp, #12]
 80039a0:	4298      	cmp	r0, r3
 80039a2:	bfb8      	it	lt
 80039a4:	4618      	movlt	r0, r3
 80039a6:	e7a4      	b.n	80038f2 <_printf_i+0x16a>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4632      	mov	r2, r6
 80039ac:	4649      	mov	r1, r9
 80039ae:	4640      	mov	r0, r8
 80039b0:	47d0      	blx	sl
 80039b2:	3001      	adds	r0, #1
 80039b4:	d09b      	beq.n	80038ee <_printf_i+0x166>
 80039b6:	3501      	adds	r5, #1
 80039b8:	68e3      	ldr	r3, [r4, #12]
 80039ba:	9903      	ldr	r1, [sp, #12]
 80039bc:	1a5b      	subs	r3, r3, r1
 80039be:	42ab      	cmp	r3, r5
 80039c0:	dcf2      	bgt.n	80039a8 <_printf_i+0x220>
 80039c2:	e7eb      	b.n	800399c <_printf_i+0x214>
 80039c4:	2500      	movs	r5, #0
 80039c6:	f104 0619 	add.w	r6, r4, #25
 80039ca:	e7f5      	b.n	80039b8 <_printf_i+0x230>
 80039cc:	0800442f 	.word	0x0800442f
 80039d0:	08004440 	.word	0x08004440

080039d4 <_sbrk_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	2300      	movs	r3, #0
 80039d8:	4d05      	ldr	r5, [pc, #20]	; (80039f0 <_sbrk_r+0x1c>)
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	f7fd fdc8 	bl	8001574 <_sbrk>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_sbrk_r+0x1a>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_sbrk_r+0x1a>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20000250 	.word	0x20000250

080039f4 <__swbuf_r>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	460e      	mov	r6, r1
 80039f8:	4614      	mov	r4, r2
 80039fa:	4605      	mov	r5, r0
 80039fc:	b118      	cbz	r0, 8003a06 <__swbuf_r+0x12>
 80039fe:	6983      	ldr	r3, [r0, #24]
 8003a00:	b90b      	cbnz	r3, 8003a06 <__swbuf_r+0x12>
 8003a02:	f000 f9d5 	bl	8003db0 <__sinit>
 8003a06:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <__swbuf_r+0x98>)
 8003a08:	429c      	cmp	r4, r3
 8003a0a:	d12b      	bne.n	8003a64 <__swbuf_r+0x70>
 8003a0c:	686c      	ldr	r4, [r5, #4]
 8003a0e:	69a3      	ldr	r3, [r4, #24]
 8003a10:	60a3      	str	r3, [r4, #8]
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	071a      	lsls	r2, r3, #28
 8003a16:	d52f      	bpl.n	8003a78 <__swbuf_r+0x84>
 8003a18:	6923      	ldr	r3, [r4, #16]
 8003a1a:	b36b      	cbz	r3, 8003a78 <__swbuf_r+0x84>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	6820      	ldr	r0, [r4, #0]
 8003a20:	b2f6      	uxtb	r6, r6
 8003a22:	1ac0      	subs	r0, r0, r3
 8003a24:	6963      	ldr	r3, [r4, #20]
 8003a26:	4637      	mov	r7, r6
 8003a28:	4283      	cmp	r3, r0
 8003a2a:	dc04      	bgt.n	8003a36 <__swbuf_r+0x42>
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f92a 	bl	8003c88 <_fflush_r>
 8003a34:	bb30      	cbnz	r0, 8003a84 <__swbuf_r+0x90>
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	3001      	adds	r0, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	6022      	str	r2, [r4, #0]
 8003a44:	701e      	strb	r6, [r3, #0]
 8003a46:	6963      	ldr	r3, [r4, #20]
 8003a48:	4283      	cmp	r3, r0
 8003a4a:	d004      	beq.n	8003a56 <__swbuf_r+0x62>
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	07db      	lsls	r3, r3, #31
 8003a50:	d506      	bpl.n	8003a60 <__swbuf_r+0x6c>
 8003a52:	2e0a      	cmp	r6, #10
 8003a54:	d104      	bne.n	8003a60 <__swbuf_r+0x6c>
 8003a56:	4621      	mov	r1, r4
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 f915 	bl	8003c88 <_fflush_r>
 8003a5e:	b988      	cbnz	r0, 8003a84 <__swbuf_r+0x90>
 8003a60:	4638      	mov	r0, r7
 8003a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <__swbuf_r+0x9c>)
 8003a66:	429c      	cmp	r4, r3
 8003a68:	d101      	bne.n	8003a6e <__swbuf_r+0x7a>
 8003a6a:	68ac      	ldr	r4, [r5, #8]
 8003a6c:	e7cf      	b.n	8003a0e <__swbuf_r+0x1a>
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <__swbuf_r+0xa0>)
 8003a70:	429c      	cmp	r4, r3
 8003a72:	bf08      	it	eq
 8003a74:	68ec      	ldreq	r4, [r5, #12]
 8003a76:	e7ca      	b.n	8003a0e <__swbuf_r+0x1a>
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f80c 	bl	8003a98 <__swsetup_r>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d0cb      	beq.n	8003a1c <__swbuf_r+0x28>
 8003a84:	f04f 37ff 	mov.w	r7, #4294967295
 8003a88:	e7ea      	b.n	8003a60 <__swbuf_r+0x6c>
 8003a8a:	bf00      	nop
 8003a8c:	08004474 	.word	0x08004474
 8003a90:	08004494 	.word	0x08004494
 8003a94:	08004454 	.word	0x08004454

08003a98 <__swsetup_r>:
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <__swsetup_r+0xcc>)
 8003a9a:	b570      	push	{r4, r5, r6, lr}
 8003a9c:	681d      	ldr	r5, [r3, #0]
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	b125      	cbz	r5, 8003aae <__swsetup_r+0x16>
 8003aa4:	69ab      	ldr	r3, [r5, #24]
 8003aa6:	b913      	cbnz	r3, 8003aae <__swsetup_r+0x16>
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f000 f981 	bl	8003db0 <__sinit>
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <__swsetup_r+0xd0>)
 8003ab0:	429c      	cmp	r4, r3
 8003ab2:	d10f      	bne.n	8003ad4 <__swsetup_r+0x3c>
 8003ab4:	686c      	ldr	r4, [r5, #4]
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003abc:	0719      	lsls	r1, r3, #28
 8003abe:	d42c      	bmi.n	8003b1a <__swsetup_r+0x82>
 8003ac0:	06dd      	lsls	r5, r3, #27
 8003ac2:	d411      	bmi.n	8003ae8 <__swsetup_r+0x50>
 8003ac4:	2309      	movs	r3, #9
 8003ac6:	6033      	str	r3, [r6, #0]
 8003ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	e03e      	b.n	8003b52 <__swsetup_r+0xba>
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <__swsetup_r+0xd4>)
 8003ad6:	429c      	cmp	r4, r3
 8003ad8:	d101      	bne.n	8003ade <__swsetup_r+0x46>
 8003ada:	68ac      	ldr	r4, [r5, #8]
 8003adc:	e7eb      	b.n	8003ab6 <__swsetup_r+0x1e>
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <__swsetup_r+0xd8>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	bf08      	it	eq
 8003ae4:	68ec      	ldreq	r4, [r5, #12]
 8003ae6:	e7e6      	b.n	8003ab6 <__swsetup_r+0x1e>
 8003ae8:	0758      	lsls	r0, r3, #29
 8003aea:	d512      	bpl.n	8003b12 <__swsetup_r+0x7a>
 8003aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aee:	b141      	cbz	r1, 8003b02 <__swsetup_r+0x6a>
 8003af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003af4:	4299      	cmp	r1, r3
 8003af6:	d002      	beq.n	8003afe <__swsetup_r+0x66>
 8003af8:	4630      	mov	r0, r6
 8003afa:	f7ff fa45 	bl	8002f88 <_free_r>
 8003afe:	2300      	movs	r3, #0
 8003b00:	6363      	str	r3, [r4, #52]	; 0x34
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	6923      	ldr	r3, [r4, #16]
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	89a3      	ldrh	r3, [r4, #12]
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	b94b      	cbnz	r3, 8003b32 <__swsetup_r+0x9a>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d003      	beq.n	8003b32 <__swsetup_r+0x9a>
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 fa05 	bl	8003f3c <__smakebuf_r>
 8003b32:	89a0      	ldrh	r0, [r4, #12]
 8003b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b38:	f010 0301 	ands.w	r3, r0, #1
 8003b3c:	d00a      	beq.n	8003b54 <__swsetup_r+0xbc>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60a3      	str	r3, [r4, #8]
 8003b42:	6963      	ldr	r3, [r4, #20]
 8003b44:	425b      	negs	r3, r3
 8003b46:	61a3      	str	r3, [r4, #24]
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	b943      	cbnz	r3, 8003b5e <__swsetup_r+0xc6>
 8003b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b50:	d1ba      	bne.n	8003ac8 <__swsetup_r+0x30>
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	0781      	lsls	r1, r0, #30
 8003b56:	bf58      	it	pl
 8003b58:	6963      	ldrpl	r3, [r4, #20]
 8003b5a:	60a3      	str	r3, [r4, #8]
 8003b5c:	e7f4      	b.n	8003b48 <__swsetup_r+0xb0>
 8003b5e:	2000      	movs	r0, #0
 8003b60:	e7f7      	b.n	8003b52 <__swsetup_r+0xba>
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
 8003b68:	08004474 	.word	0x08004474
 8003b6c:	08004494 	.word	0x08004494
 8003b70:	08004454 	.word	0x08004454

08003b74 <abort>:
 8003b74:	2006      	movs	r0, #6
 8003b76:	b508      	push	{r3, lr}
 8003b78:	f000 faac 	bl	80040d4 <raise>
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7fd fc85 	bl	800148c <_exit>
	...

08003b84 <__sflush_r>:
 8003b84:	898a      	ldrh	r2, [r1, #12]
 8003b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b88:	4605      	mov	r5, r0
 8003b8a:	0710      	lsls	r0, r2, #28
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	d457      	bmi.n	8003c40 <__sflush_r+0xbc>
 8003b90:	684b      	ldr	r3, [r1, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dc04      	bgt.n	8003ba0 <__sflush_r+0x1c>
 8003b96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	dc01      	bgt.n	8003ba0 <__sflush_r+0x1c>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ba2:	2e00      	cmp	r6, #0
 8003ba4:	d0fa      	beq.n	8003b9c <__sflush_r+0x18>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bac:	682f      	ldr	r7, [r5, #0]
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	d032      	beq.n	8003c18 <__sflush_r+0x94>
 8003bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	075a      	lsls	r2, r3, #29
 8003bb8:	d505      	bpl.n	8003bc6 <__sflush_r+0x42>
 8003bba:	6863      	ldr	r3, [r4, #4]
 8003bbc:	1ac0      	subs	r0, r0, r3
 8003bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bc0:	b10b      	cbz	r3, 8003bc6 <__sflush_r+0x42>
 8003bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bc4:	1ac0      	subs	r0, r0, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bcc:	4628      	mov	r0, r5
 8003bce:	6a21      	ldr	r1, [r4, #32]
 8003bd0:	47b0      	blx	r6
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	d106      	bne.n	8003be6 <__sflush_r+0x62>
 8003bd8:	6829      	ldr	r1, [r5, #0]
 8003bda:	291d      	cmp	r1, #29
 8003bdc:	d82c      	bhi.n	8003c38 <__sflush_r+0xb4>
 8003bde:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <__sflush_r+0x100>)
 8003be0:	40ca      	lsrs	r2, r1
 8003be2:	07d6      	lsls	r6, r2, #31
 8003be4:	d528      	bpl.n	8003c38 <__sflush_r+0xb4>
 8003be6:	2200      	movs	r2, #0
 8003be8:	6062      	str	r2, [r4, #4]
 8003bea:	6922      	ldr	r2, [r4, #16]
 8003bec:	04d9      	lsls	r1, r3, #19
 8003bee:	6022      	str	r2, [r4, #0]
 8003bf0:	d504      	bpl.n	8003bfc <__sflush_r+0x78>
 8003bf2:	1c42      	adds	r2, r0, #1
 8003bf4:	d101      	bne.n	8003bfa <__sflush_r+0x76>
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	b903      	cbnz	r3, 8003bfc <__sflush_r+0x78>
 8003bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8003bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bfe:	602f      	str	r7, [r5, #0]
 8003c00:	2900      	cmp	r1, #0
 8003c02:	d0cb      	beq.n	8003b9c <__sflush_r+0x18>
 8003c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c08:	4299      	cmp	r1, r3
 8003c0a:	d002      	beq.n	8003c12 <__sflush_r+0x8e>
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7ff f9bb 	bl	8002f88 <_free_r>
 8003c12:	2000      	movs	r0, #0
 8003c14:	6360      	str	r0, [r4, #52]	; 0x34
 8003c16:	e7c2      	b.n	8003b9e <__sflush_r+0x1a>
 8003c18:	6a21      	ldr	r1, [r4, #32]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b0      	blx	r6
 8003c20:	1c41      	adds	r1, r0, #1
 8003c22:	d1c7      	bne.n	8003bb4 <__sflush_r+0x30>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0c4      	beq.n	8003bb4 <__sflush_r+0x30>
 8003c2a:	2b1d      	cmp	r3, #29
 8003c2c:	d001      	beq.n	8003c32 <__sflush_r+0xae>
 8003c2e:	2b16      	cmp	r3, #22
 8003c30:	d101      	bne.n	8003c36 <__sflush_r+0xb2>
 8003c32:	602f      	str	r7, [r5, #0]
 8003c34:	e7b2      	b.n	8003b9c <__sflush_r+0x18>
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3c:	81a3      	strh	r3, [r4, #12]
 8003c3e:	e7ae      	b.n	8003b9e <__sflush_r+0x1a>
 8003c40:	690f      	ldr	r7, [r1, #16]
 8003c42:	2f00      	cmp	r7, #0
 8003c44:	d0aa      	beq.n	8003b9c <__sflush_r+0x18>
 8003c46:	0793      	lsls	r3, r2, #30
 8003c48:	bf18      	it	ne
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	680e      	ldr	r6, [r1, #0]
 8003c4e:	bf08      	it	eq
 8003c50:	694b      	ldreq	r3, [r1, #20]
 8003c52:	1bf6      	subs	r6, r6, r7
 8003c54:	600f      	str	r7, [r1, #0]
 8003c56:	608b      	str	r3, [r1, #8]
 8003c58:	2e00      	cmp	r6, #0
 8003c5a:	dd9f      	ble.n	8003b9c <__sflush_r+0x18>
 8003c5c:	4633      	mov	r3, r6
 8003c5e:	463a      	mov	r2, r7
 8003c60:	4628      	mov	r0, r5
 8003c62:	6a21      	ldr	r1, [r4, #32]
 8003c64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c68:	47e0      	blx	ip
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	dc06      	bgt.n	8003c7c <__sflush_r+0xf8>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	e790      	b.n	8003b9e <__sflush_r+0x1a>
 8003c7c:	4407      	add	r7, r0
 8003c7e:	1a36      	subs	r6, r6, r0
 8003c80:	e7ea      	b.n	8003c58 <__sflush_r+0xd4>
 8003c82:	bf00      	nop
 8003c84:	20400001 	.word	0x20400001

08003c88 <_fflush_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	690b      	ldr	r3, [r1, #16]
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	b913      	cbnz	r3, 8003c98 <_fflush_r+0x10>
 8003c92:	2500      	movs	r5, #0
 8003c94:	4628      	mov	r0, r5
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	b118      	cbz	r0, 8003ca2 <_fflush_r+0x1a>
 8003c9a:	6983      	ldr	r3, [r0, #24]
 8003c9c:	b90b      	cbnz	r3, 8003ca2 <_fflush_r+0x1a>
 8003c9e:	f000 f887 	bl	8003db0 <__sinit>
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <_fflush_r+0x6c>)
 8003ca4:	429c      	cmp	r4, r3
 8003ca6:	d11b      	bne.n	8003ce0 <_fflush_r+0x58>
 8003ca8:	686c      	ldr	r4, [r5, #4]
 8003caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ef      	beq.n	8003c92 <_fflush_r+0xa>
 8003cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cb4:	07d0      	lsls	r0, r2, #31
 8003cb6:	d404      	bmi.n	8003cc2 <_fflush_r+0x3a>
 8003cb8:	0599      	lsls	r1, r3, #22
 8003cba:	d402      	bmi.n	8003cc2 <_fflush_r+0x3a>
 8003cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cbe:	f000 f915 	bl	8003eec <__retarget_lock_acquire_recursive>
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	f7ff ff5d 	bl	8003b84 <__sflush_r>
 8003cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ccc:	4605      	mov	r5, r0
 8003cce:	07da      	lsls	r2, r3, #31
 8003cd0:	d4e0      	bmi.n	8003c94 <_fflush_r+0xc>
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	059b      	lsls	r3, r3, #22
 8003cd6:	d4dd      	bmi.n	8003c94 <_fflush_r+0xc>
 8003cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cda:	f000 f908 	bl	8003eee <__retarget_lock_release_recursive>
 8003cde:	e7d9      	b.n	8003c94 <_fflush_r+0xc>
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <_fflush_r+0x70>)
 8003ce2:	429c      	cmp	r4, r3
 8003ce4:	d101      	bne.n	8003cea <_fflush_r+0x62>
 8003ce6:	68ac      	ldr	r4, [r5, #8]
 8003ce8:	e7df      	b.n	8003caa <_fflush_r+0x22>
 8003cea:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <_fflush_r+0x74>)
 8003cec:	429c      	cmp	r4, r3
 8003cee:	bf08      	it	eq
 8003cf0:	68ec      	ldreq	r4, [r5, #12]
 8003cf2:	e7da      	b.n	8003caa <_fflush_r+0x22>
 8003cf4:	08004474 	.word	0x08004474
 8003cf8:	08004494 	.word	0x08004494
 8003cfc:	08004454 	.word	0x08004454

08003d00 <std>:
 8003d00:	2300      	movs	r3, #0
 8003d02:	b510      	push	{r4, lr}
 8003d04:	4604      	mov	r4, r0
 8003d06:	e9c0 3300 	strd	r3, r3, [r0]
 8003d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d0e:	6083      	str	r3, [r0, #8]
 8003d10:	8181      	strh	r1, [r0, #12]
 8003d12:	6643      	str	r3, [r0, #100]	; 0x64
 8003d14:	81c2      	strh	r2, [r0, #14]
 8003d16:	6183      	str	r3, [r0, #24]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	305c      	adds	r0, #92	; 0x5c
 8003d1e:	f7ff f867 	bl	8002df0 <memset>
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <std+0x38>)
 8003d24:	6224      	str	r4, [r4, #32]
 8003d26:	6263      	str	r3, [r4, #36]	; 0x24
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <std+0x3c>)
 8003d2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <std+0x40>)
 8003d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <std+0x44>)
 8003d32:	6323      	str	r3, [r4, #48]	; 0x30
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	bf00      	nop
 8003d38:	0800410d 	.word	0x0800410d
 8003d3c:	0800412f 	.word	0x0800412f
 8003d40:	08004167 	.word	0x08004167
 8003d44:	0800418b 	.word	0x0800418b

08003d48 <_cleanup_r>:
 8003d48:	4901      	ldr	r1, [pc, #4]	; (8003d50 <_cleanup_r+0x8>)
 8003d4a:	f000 b8af 	b.w	8003eac <_fwalk_reent>
 8003d4e:	bf00      	nop
 8003d50:	08003c89 	.word	0x08003c89

08003d54 <__sfmoreglue>:
 8003d54:	2268      	movs	r2, #104	; 0x68
 8003d56:	b570      	push	{r4, r5, r6, lr}
 8003d58:	1e4d      	subs	r5, r1, #1
 8003d5a:	4355      	muls	r5, r2
 8003d5c:	460e      	mov	r6, r1
 8003d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d62:	f7ff f979 	bl	8003058 <_malloc_r>
 8003d66:	4604      	mov	r4, r0
 8003d68:	b140      	cbz	r0, 8003d7c <__sfmoreglue+0x28>
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8003d70:	300c      	adds	r0, #12
 8003d72:	60a0      	str	r0, [r4, #8]
 8003d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d78:	f7ff f83a 	bl	8002df0 <memset>
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}

08003d80 <__sfp_lock_acquire>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__sfp_lock_acquire+0x8>)
 8003d82:	f000 b8b3 	b.w	8003eec <__retarget_lock_acquire_recursive>
 8003d86:	bf00      	nop
 8003d88:	2000024d 	.word	0x2000024d

08003d8c <__sfp_lock_release>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <__sfp_lock_release+0x8>)
 8003d8e:	f000 b8ae 	b.w	8003eee <__retarget_lock_release_recursive>
 8003d92:	bf00      	nop
 8003d94:	2000024d 	.word	0x2000024d

08003d98 <__sinit_lock_acquire>:
 8003d98:	4801      	ldr	r0, [pc, #4]	; (8003da0 <__sinit_lock_acquire+0x8>)
 8003d9a:	f000 b8a7 	b.w	8003eec <__retarget_lock_acquire_recursive>
 8003d9e:	bf00      	nop
 8003da0:	2000024e 	.word	0x2000024e

08003da4 <__sinit_lock_release>:
 8003da4:	4801      	ldr	r0, [pc, #4]	; (8003dac <__sinit_lock_release+0x8>)
 8003da6:	f000 b8a2 	b.w	8003eee <__retarget_lock_release_recursive>
 8003daa:	bf00      	nop
 8003dac:	2000024e 	.word	0x2000024e

08003db0 <__sinit>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	f7ff fff0 	bl	8003d98 <__sinit_lock_acquire>
 8003db8:	69a3      	ldr	r3, [r4, #24]
 8003dba:	b11b      	cbz	r3, 8003dc4 <__sinit+0x14>
 8003dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc0:	f7ff bff0 	b.w	8003da4 <__sinit_lock_release>
 8003dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <__sinit+0x68>)
 8003dcc:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <__sinit+0x6c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	bf08      	it	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	4620      	mov	r0, r4
 8003dda:	bf08      	it	eq
 8003ddc:	61a3      	streq	r3, [r4, #24]
 8003dde:	f000 f81f 	bl	8003e20 <__sfp>
 8003de2:	6060      	str	r0, [r4, #4]
 8003de4:	4620      	mov	r0, r4
 8003de6:	f000 f81b 	bl	8003e20 <__sfp>
 8003dea:	60a0      	str	r0, [r4, #8]
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 f817 	bl	8003e20 <__sfp>
 8003df2:	2200      	movs	r2, #0
 8003df4:	2104      	movs	r1, #4
 8003df6:	60e0      	str	r0, [r4, #12]
 8003df8:	6860      	ldr	r0, [r4, #4]
 8003dfa:	f7ff ff81 	bl	8003d00 <std>
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2109      	movs	r1, #9
 8003e02:	68a0      	ldr	r0, [r4, #8]
 8003e04:	f7ff ff7c 	bl	8003d00 <std>
 8003e08:	2202      	movs	r2, #2
 8003e0a:	2112      	movs	r1, #18
 8003e0c:	68e0      	ldr	r0, [r4, #12]
 8003e0e:	f7ff ff77 	bl	8003d00 <std>
 8003e12:	2301      	movs	r3, #1
 8003e14:	61a3      	str	r3, [r4, #24]
 8003e16:	e7d1      	b.n	8003dbc <__sinit+0xc>
 8003e18:	0800436c 	.word	0x0800436c
 8003e1c:	08003d49 	.word	0x08003d49

08003e20 <__sfp>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	4607      	mov	r7, r0
 8003e24:	f7ff ffac 	bl	8003d80 <__sfp_lock_acquire>
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <__sfp+0x84>)
 8003e2a:	681e      	ldr	r6, [r3, #0]
 8003e2c:	69b3      	ldr	r3, [r6, #24]
 8003e2e:	b913      	cbnz	r3, 8003e36 <__sfp+0x16>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff ffbd 	bl	8003db0 <__sinit>
 8003e36:	3648      	adds	r6, #72	; 0x48
 8003e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	d503      	bpl.n	8003e48 <__sfp+0x28>
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	b30b      	cbz	r3, 8003e88 <__sfp+0x68>
 8003e44:	6836      	ldr	r6, [r6, #0]
 8003e46:	e7f7      	b.n	8003e38 <__sfp+0x18>
 8003e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e4c:	b9d5      	cbnz	r5, 8003e84 <__sfp+0x64>
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <__sfp+0x88>)
 8003e50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e54:	60e3      	str	r3, [r4, #12]
 8003e56:	6665      	str	r5, [r4, #100]	; 0x64
 8003e58:	f000 f847 	bl	8003eea <__retarget_lock_init_recursive>
 8003e5c:	f7ff ff96 	bl	8003d8c <__sfp_lock_release>
 8003e60:	2208      	movs	r2, #8
 8003e62:	4629      	mov	r1, r5
 8003e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e6c:	6025      	str	r5, [r4, #0]
 8003e6e:	61a5      	str	r5, [r4, #24]
 8003e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e74:	f7fe ffbc 	bl	8002df0 <memset>
 8003e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e80:	4620      	mov	r0, r4
 8003e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e84:	3468      	adds	r4, #104	; 0x68
 8003e86:	e7d9      	b.n	8003e3c <__sfp+0x1c>
 8003e88:	2104      	movs	r1, #4
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff ff62 	bl	8003d54 <__sfmoreglue>
 8003e90:	4604      	mov	r4, r0
 8003e92:	6030      	str	r0, [r6, #0]
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d1d5      	bne.n	8003e44 <__sfp+0x24>
 8003e98:	f7ff ff78 	bl	8003d8c <__sfp_lock_release>
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	e7ee      	b.n	8003e80 <__sfp+0x60>
 8003ea2:	bf00      	nop
 8003ea4:	0800436c 	.word	0x0800436c
 8003ea8:	ffff0001 	.word	0xffff0001

08003eac <_fwalk_reent>:
 8003eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	4688      	mov	r8, r1
 8003eb4:	2700      	movs	r7, #0
 8003eb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8003ec2:	d505      	bpl.n	8003ed0 <_fwalk_reent+0x24>
 8003ec4:	6824      	ldr	r4, [r4, #0]
 8003ec6:	2c00      	cmp	r4, #0
 8003ec8:	d1f7      	bne.n	8003eba <_fwalk_reent+0xe>
 8003eca:	4638      	mov	r0, r7
 8003ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ed0:	89ab      	ldrh	r3, [r5, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d907      	bls.n	8003ee6 <_fwalk_reent+0x3a>
 8003ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003eda:	3301      	adds	r3, #1
 8003edc:	d003      	beq.n	8003ee6 <_fwalk_reent+0x3a>
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	47c0      	blx	r8
 8003ee4:	4307      	orrs	r7, r0
 8003ee6:	3568      	adds	r5, #104	; 0x68
 8003ee8:	e7e9      	b.n	8003ebe <_fwalk_reent+0x12>

08003eea <__retarget_lock_init_recursive>:
 8003eea:	4770      	bx	lr

08003eec <__retarget_lock_acquire_recursive>:
 8003eec:	4770      	bx	lr

08003eee <__retarget_lock_release_recursive>:
 8003eee:	4770      	bx	lr

08003ef0 <__swhatbuf_r>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	460e      	mov	r6, r1
 8003ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef8:	4614      	mov	r4, r2
 8003efa:	2900      	cmp	r1, #0
 8003efc:	461d      	mov	r5, r3
 8003efe:	b096      	sub	sp, #88	; 0x58
 8003f00:	da08      	bge.n	8003f14 <__swhatbuf_r+0x24>
 8003f02:	2200      	movs	r2, #0
 8003f04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f08:	602a      	str	r2, [r5, #0]
 8003f0a:	061a      	lsls	r2, r3, #24
 8003f0c:	d410      	bmi.n	8003f30 <__swhatbuf_r+0x40>
 8003f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f12:	e00e      	b.n	8003f32 <__swhatbuf_r+0x42>
 8003f14:	466a      	mov	r2, sp
 8003f16:	f000 f95f 	bl	80041d8 <_fstat_r>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	dbf1      	blt.n	8003f02 <__swhatbuf_r+0x12>
 8003f1e:	9a01      	ldr	r2, [sp, #4]
 8003f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f28:	425a      	negs	r2, r3
 8003f2a:	415a      	adcs	r2, r3
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	e7ee      	b.n	8003f0e <__swhatbuf_r+0x1e>
 8003f30:	2340      	movs	r3, #64	; 0x40
 8003f32:	2000      	movs	r0, #0
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	b016      	add	sp, #88	; 0x58
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f3c <__smakebuf_r>:
 8003f3c:	898b      	ldrh	r3, [r1, #12]
 8003f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f40:	079d      	lsls	r5, r3, #30
 8003f42:	4606      	mov	r6, r0
 8003f44:	460c      	mov	r4, r1
 8003f46:	d507      	bpl.n	8003f58 <__smakebuf_r+0x1c>
 8003f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	6123      	str	r3, [r4, #16]
 8003f50:	2301      	movs	r3, #1
 8003f52:	6163      	str	r3, [r4, #20]
 8003f54:	b002      	add	sp, #8
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	466a      	mov	r2, sp
 8003f5a:	ab01      	add	r3, sp, #4
 8003f5c:	f7ff ffc8 	bl	8003ef0 <__swhatbuf_r>
 8003f60:	9900      	ldr	r1, [sp, #0]
 8003f62:	4605      	mov	r5, r0
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7ff f877 	bl	8003058 <_malloc_r>
 8003f6a:	b948      	cbnz	r0, 8003f80 <__smakebuf_r+0x44>
 8003f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f70:	059a      	lsls	r2, r3, #22
 8003f72:	d4ef      	bmi.n	8003f54 <__smakebuf_r+0x18>
 8003f74:	f023 0303 	bic.w	r3, r3, #3
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	e7e3      	b.n	8003f48 <__smakebuf_r+0xc>
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <__smakebuf_r+0x7c>)
 8003f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	6020      	str	r0, [r4, #0]
 8003f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8c:	81a3      	strh	r3, [r4, #12]
 8003f8e:	9b00      	ldr	r3, [sp, #0]
 8003f90:	6120      	str	r0, [r4, #16]
 8003f92:	6163      	str	r3, [r4, #20]
 8003f94:	9b01      	ldr	r3, [sp, #4]
 8003f96:	b15b      	cbz	r3, 8003fb0 <__smakebuf_r+0x74>
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f9e:	f000 f92d 	bl	80041fc <_isatty_r>
 8003fa2:	b128      	cbz	r0, 8003fb0 <__smakebuf_r+0x74>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	89a0      	ldrh	r0, [r4, #12]
 8003fb2:	4305      	orrs	r5, r0
 8003fb4:	81a5      	strh	r5, [r4, #12]
 8003fb6:	e7cd      	b.n	8003f54 <__smakebuf_r+0x18>
 8003fb8:	08003d49 	.word	0x08003d49

08003fbc <memchr>:
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	b2c9      	uxtb	r1, r1
 8003fc2:	4402      	add	r2, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	d101      	bne.n	8003fce <memchr+0x12>
 8003fca:	2000      	movs	r0, #0
 8003fcc:	e003      	b.n	8003fd6 <memchr+0x1a>
 8003fce:	7804      	ldrb	r4, [r0, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	428c      	cmp	r4, r1
 8003fd4:	d1f6      	bne.n	8003fc4 <memchr+0x8>
 8003fd6:	bd10      	pop	{r4, pc}

08003fd8 <memmove>:
 8003fd8:	4288      	cmp	r0, r1
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	eb01 0402 	add.w	r4, r1, r2
 8003fe0:	d902      	bls.n	8003fe8 <memmove+0x10>
 8003fe2:	4284      	cmp	r4, r0
 8003fe4:	4623      	mov	r3, r4
 8003fe6:	d807      	bhi.n	8003ff8 <memmove+0x20>
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	42a1      	cmp	r1, r4
 8003fec:	d008      	beq.n	8004000 <memmove+0x28>
 8003fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ff6:	e7f8      	b.n	8003fea <memmove+0x12>
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	4402      	add	r2, r0
 8003ffc:	428a      	cmp	r2, r1
 8003ffe:	d100      	bne.n	8004002 <memmove+0x2a>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800400a:	e7f7      	b.n	8003ffc <memmove+0x24>

0800400c <__malloc_lock>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__malloc_lock+0x8>)
 800400e:	f7ff bf6d 	b.w	8003eec <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	2000024c 	.word	0x2000024c

08004018 <__malloc_unlock>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__malloc_unlock+0x8>)
 800401a:	f7ff bf68 	b.w	8003eee <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	2000024c 	.word	0x2000024c

08004024 <_realloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	4680      	mov	r8, r0
 800402a:	4614      	mov	r4, r2
 800402c:	460e      	mov	r6, r1
 800402e:	b921      	cbnz	r1, 800403a <_realloc_r+0x16>
 8004030:	4611      	mov	r1, r2
 8004032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	f7ff b80f 	b.w	8003058 <_malloc_r>
 800403a:	b92a      	cbnz	r2, 8004048 <_realloc_r+0x24>
 800403c:	f7fe ffa4 	bl	8002f88 <_free_r>
 8004040:	4625      	mov	r5, r4
 8004042:	4628      	mov	r0, r5
 8004044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004048:	f000 f8fa 	bl	8004240 <_malloc_usable_size_r>
 800404c:	4284      	cmp	r4, r0
 800404e:	4607      	mov	r7, r0
 8004050:	d802      	bhi.n	8004058 <_realloc_r+0x34>
 8004052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004056:	d812      	bhi.n	800407e <_realloc_r+0x5a>
 8004058:	4621      	mov	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f7fe fffc 	bl	8003058 <_malloc_r>
 8004060:	4605      	mov	r5, r0
 8004062:	2800      	cmp	r0, #0
 8004064:	d0ed      	beq.n	8004042 <_realloc_r+0x1e>
 8004066:	42bc      	cmp	r4, r7
 8004068:	4622      	mov	r2, r4
 800406a:	4631      	mov	r1, r6
 800406c:	bf28      	it	cs
 800406e:	463a      	movcs	r2, r7
 8004070:	f7fe feb0 	bl	8002dd4 <memcpy>
 8004074:	4631      	mov	r1, r6
 8004076:	4640      	mov	r0, r8
 8004078:	f7fe ff86 	bl	8002f88 <_free_r>
 800407c:	e7e1      	b.n	8004042 <_realloc_r+0x1e>
 800407e:	4635      	mov	r5, r6
 8004080:	e7df      	b.n	8004042 <_realloc_r+0x1e>

08004082 <_raise_r>:
 8004082:	291f      	cmp	r1, #31
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4604      	mov	r4, r0
 8004088:	460d      	mov	r5, r1
 800408a:	d904      	bls.n	8004096 <_raise_r+0x14>
 800408c:	2316      	movs	r3, #22
 800408e:	6003      	str	r3, [r0, #0]
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004098:	b112      	cbz	r2, 80040a0 <_raise_r+0x1e>
 800409a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800409e:	b94b      	cbnz	r3, 80040b4 <_raise_r+0x32>
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f831 	bl	8004108 <_getpid_r>
 80040a6:	462a      	mov	r2, r5
 80040a8:	4601      	mov	r1, r0
 80040aa:	4620      	mov	r0, r4
 80040ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040b0:	f000 b818 	b.w	80040e4 <_kill_r>
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d00a      	beq.n	80040ce <_raise_r+0x4c>
 80040b8:	1c59      	adds	r1, r3, #1
 80040ba:	d103      	bne.n	80040c4 <_raise_r+0x42>
 80040bc:	2316      	movs	r3, #22
 80040be:	6003      	str	r3, [r0, #0]
 80040c0:	2001      	movs	r0, #1
 80040c2:	e7e7      	b.n	8004094 <_raise_r+0x12>
 80040c4:	2400      	movs	r4, #0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80040cc:	4798      	blx	r3
 80040ce:	2000      	movs	r0, #0
 80040d0:	e7e0      	b.n	8004094 <_raise_r+0x12>
	...

080040d4 <raise>:
 80040d4:	4b02      	ldr	r3, [pc, #8]	; (80040e0 <raise+0xc>)
 80040d6:	4601      	mov	r1, r0
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f7ff bfd2 	b.w	8004082 <_raise_r>
 80040de:	bf00      	nop
 80040e0:	2000000c 	.word	0x2000000c

080040e4 <_kill_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	2300      	movs	r3, #0
 80040e8:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_kill_r+0x20>)
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	f7fd f9bb 	bl	800146c <_kill>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d102      	bne.n	8004100 <_kill_r+0x1c>
 80040fa:	682b      	ldr	r3, [r5, #0]
 80040fc:	b103      	cbz	r3, 8004100 <_kill_r+0x1c>
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	bd38      	pop	{r3, r4, r5, pc}
 8004102:	bf00      	nop
 8004104:	20000250 	.word	0x20000250

08004108 <_getpid_r>:
 8004108:	f7fd b9a9 	b.w	800145e <_getpid>

0800410c <__sread>:
 800410c:	b510      	push	{r4, lr}
 800410e:	460c      	mov	r4, r1
 8004110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004114:	f000 f89c 	bl	8004250 <_read_r>
 8004118:	2800      	cmp	r0, #0
 800411a:	bfab      	itete	ge
 800411c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800411e:	89a3      	ldrhlt	r3, [r4, #12]
 8004120:	181b      	addge	r3, r3, r0
 8004122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004126:	bfac      	ite	ge
 8004128:	6563      	strge	r3, [r4, #84]	; 0x54
 800412a:	81a3      	strhlt	r3, [r4, #12]
 800412c:	bd10      	pop	{r4, pc}

0800412e <__swrite>:
 800412e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	461f      	mov	r7, r3
 8004134:	898b      	ldrh	r3, [r1, #12]
 8004136:	4605      	mov	r5, r0
 8004138:	05db      	lsls	r3, r3, #23
 800413a:	460c      	mov	r4, r1
 800413c:	4616      	mov	r6, r2
 800413e:	d505      	bpl.n	800414c <__swrite+0x1e>
 8004140:	2302      	movs	r3, #2
 8004142:	2200      	movs	r2, #0
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	f000 f868 	bl	800421c <_lseek_r>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	4632      	mov	r2, r6
 8004150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004154:	81a3      	strh	r3, [r4, #12]
 8004156:	4628      	mov	r0, r5
 8004158:	463b      	mov	r3, r7
 800415a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800415e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	f000 b817 	b.w	8004194 <_write_r>

08004166 <__sseek>:
 8004166:	b510      	push	{r4, lr}
 8004168:	460c      	mov	r4, r1
 800416a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416e:	f000 f855 	bl	800421c <_lseek_r>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	bf15      	itete	ne
 8004178:	6560      	strne	r0, [r4, #84]	; 0x54
 800417a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800417e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004182:	81a3      	strheq	r3, [r4, #12]
 8004184:	bf18      	it	ne
 8004186:	81a3      	strhne	r3, [r4, #12]
 8004188:	bd10      	pop	{r4, pc}

0800418a <__sclose>:
 800418a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418e:	f000 b813 	b.w	80041b8 <_close_r>
	...

08004194 <_write_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	2200      	movs	r2, #0
 800419e:	4d05      	ldr	r5, [pc, #20]	; (80041b4 <_write_r+0x20>)
 80041a0:	602a      	str	r2, [r5, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7fd f999 	bl	80014da <_write>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_write_r+0x1e>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_write_r+0x1e>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	20000250 	.word	0x20000250

080041b8 <_close_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	2300      	movs	r3, #0
 80041bc:	4d05      	ldr	r5, [pc, #20]	; (80041d4 <_close_r+0x1c>)
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fd f9a5 	bl	8001512 <_close>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_close_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_close_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000250 	.word	0x20000250

080041d8 <_fstat_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	2300      	movs	r3, #0
 80041dc:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_fstat_r+0x20>)
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	f7fd f99f 	bl	8001528 <_fstat>
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	d102      	bne.n	80041f4 <_fstat_r+0x1c>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	b103      	cbz	r3, 80041f4 <_fstat_r+0x1c>
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
 80041f6:	bf00      	nop
 80041f8:	20000250 	.word	0x20000250

080041fc <_isatty_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	2300      	movs	r3, #0
 8004200:	4d05      	ldr	r5, [pc, #20]	; (8004218 <_isatty_r+0x1c>)
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fd f99d 	bl	8001546 <_isatty>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_isatty_r+0x1a>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_isatty_r+0x1a>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	20000250 	.word	0x20000250

0800421c <_lseek_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	2200      	movs	r2, #0
 8004226:	4d05      	ldr	r5, [pc, #20]	; (800423c <_lseek_r+0x20>)
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f7fd f995 	bl	800155a <_lseek>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_lseek_r+0x1e>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_lseek_r+0x1e>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	20000250 	.word	0x20000250

08004240 <_malloc_usable_size_r>:
 8004240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004244:	1f18      	subs	r0, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	bfbc      	itt	lt
 800424a:	580b      	ldrlt	r3, [r1, r0]
 800424c:	18c0      	addlt	r0, r0, r3
 800424e:	4770      	bx	lr

08004250 <_read_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4604      	mov	r4, r0
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	2200      	movs	r2, #0
 800425a:	4d05      	ldr	r5, [pc, #20]	; (8004270 <_read_r+0x20>)
 800425c:	602a      	str	r2, [r5, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f7fd f91e 	bl	80014a0 <_read>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_read_r+0x1e>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_read_r+0x1e>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20000250 	.word	0x20000250

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
